{"version":3,"file":"prepareSourceAsset-ec2ea4fc.js","sources":["../../src/utils/prepareSourceAsset.ts"],"sourcesContent":["import authService from '../services/authService';\n\nexport async function prepareSourceAsset(activeFileOrUrl: File | string) {\n  // If it's already a public http(s) URL, skip upload.\n  if (typeof activeFileOrUrl === 'string' && /^https?:\\/\\//i.test(activeFileOrUrl)) {\n    const resource_type = /\\.(mp4|mov|webm)$/i.test(activeFileOrUrl) ? 'video' : 'image';\n    return { url: activeFileOrUrl, resource_type };\n  }\n\n  // If it's a blob URL string, convert to File first\n  let file: File;\n  if (typeof activeFileOrUrl === 'string' && activeFileOrUrl.startsWith('blob:')) {\n    const resp = await fetch(activeFileOrUrl);\n    const blob = await resp.blob();\n    const ext = blob.type.startsWith('image/') ? (blob.type.split('/')[1] || 'png') :\n                blob.type.startsWith('video/') ? (blob.type.split('/')[1] || 'mp4') : 'bin';\n    file = new File([blob], `source.${ext}`, { type: blob.type || 'application/octet-stream' });\n  } else {\n    file = activeFileOrUrl as File;\n  }\n\n  // Signed params\n  const signRes = await fetch('/.netlify/functions/cloudinary-sign', { method: 'POST' });\n  const { timestamp, signature, api_key, cloud_name, folder, upload_preset } = await signRes.json();\n\n  const form = new FormData();\n  form.append('file', file); // <-- real File now\n  form.append('timestamp', String(timestamp));\n  form.append('signature', signature);\n  form.append('api_key', api_key);\n  if (folder) form.append('folder', folder);\n  if (upload_preset) form.append('upload_preset', upload_preset);\n\n  const up = await fetch(`https://api.cloudinary.com/v1_1/${cloud_name}/auto/upload`, {\n    method: 'POST',\n    body: form,\n  });\n\n  // Better 400 debug\n  const json = await up.json().catch(() => ({} as any));\n  if (!up.ok) {\n    console.error('Cloudinary upload failed:', json);\n    throw new Error('Cloudinary upload failed');\n  }\n\n  const resource_type = json.resource_type; // 'image' | 'video'\n  return { url: json.secure_url as string, resource_type };\n}"],"names":["async","prepareSourceAsset","activeFileOrUrl","test","url","resource_type","file","startsWith","resp","fetch","blob","ext","type","split","File","signRes","method","timestamp","signature","api_key","cloud_name","folder","upload_preset","json","form","FormData","append","String","up","body","catch","ok","console","error","Error","secure_url"],"mappings":"AAEAA,eAAsBC,mBAAmBC,GAEvC,GAA+B,iBAApBA,GAAgC,gBAAgBC,KAAKD,GAAkB,CAEhF,MAAO,CAAEE,IAAKF,EAAiBG,cADT,qBAAqBF,KAAKD,GAAmB,QAAU,QAE/E,CAGI,IAAAI,EACJ,GAA+B,iBAApBJ,GAAgCA,EAAgBK,WAAW,SAAU,CACxE,MAAAC,QAAaC,MAAMP,GACnBQ,QAAaF,EAAKE,OAClBC,EAAMD,EAAKE,KAAKL,WAAW,UAAaG,EAAKE,KAAKC,MAAM,KAAK,IAAM,MAC7DH,EAAKE,KAAKL,WAAW,UAAaG,EAAKE,KAAKC,MAAM,KAAK,IAAM,MAAS,MAClFP,EAAO,IAAIQ,KAAK,CAACJ,GAAO,UAAUC,IAAO,CAAEC,KAAMF,EAAKE,MAAQ,4BAA4B,MAEnFN,EAAAJ,EAIT,MAAMa,QAAgBN,MAAM,sCAAuC,CAAEO,OAAQ,UACvEC,UAAEA,EAAWC,UAAAA,EAAAC,QAAWA,EAASC,WAAAA,EAAAC,OAAYA,gBAAQC,SAAwBP,EAAQQ,OAErFC,EAAO,IAAIC,SACZD,EAAAE,OAAO,OAAQpB,GACpBkB,EAAKE,OAAO,YAAaC,OAAOV,IAC3BO,EAAAE,OAAO,YAAaR,GACpBM,EAAAE,OAAO,UAAWP,GACnBE,GAAaG,EAAAE,OAAO,SAAUL,GAC9BC,GAAoBE,EAAAE,OAAO,gBAAiBJ,GAEhD,MAAMM,QAAWnB,MAAM,mCAAmCW,gBAA0B,CAClFJ,OAAQ,OACRa,KAAML,IAIFD,QAAaK,EAAGL,OAAOO,MAAM,KAAA,CAAiB,IAChD,IAACF,EAAGG,GAEA,MADEC,QAAAC,MAAM,4BAA6BV,GACrC,IAAIW,MAAM,4BAGlB,MAAM7B,EAAgBkB,EAAKlB,cAC3B,MAAO,CAAED,IAAKmB,EAAKY,WAAsB9B,gBAC3C"}