var i=Object.defineProperty;var c=(o,r,e)=>r in o?i(o,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[r]=e;var n=(o,r,e)=>(c(o,typeof r!="symbol"?r+"":r,e),e);class l{constructor(){n(this,"baseUrl","/.netlify/functions")}async toggleLike(r){try{const e=await fetch(`${this.baseUrl}/toggleLike`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${localStorage.getItem("stefna_jwt")||""}`},body:JSON.stringify({mediaId:r})});if(!e.ok){const a=await e.json();throw new Error(a.error||"Failed to toggle like")}const s=await e.json();return{success:!0,action:s.action,likeCount:s.likeCount,isLiked:s.isLiked}}catch(e){return console.error("Toggle like error:",e),{success:!1,action:"error",error:e instanceof Error?e.message:"Unknown error"}}}async recordShare(r,e="public"){try{const s=await fetch(`${this.baseUrl}/recordShare`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${localStorage.getItem("stefna_jwt")||""}`},body:JSON.stringify({mediaId:r,shareType:e})});if(!s.ok){const t=await s.json();throw new Error(t.error||"Failed to record share")}const a=await s.json();return{success:!0,action:a.action,shareCount:a.shareCount}}catch(s){return console.error("Record share error:",s),{success:!1,action:"error",error:s instanceof Error?s.message:"Unknown error"}}}async getInteractionCounts(r){try{return{likes:0,remixes:0,shares:0}}catch(e){return console.error("Get interaction counts error:",e),{likes:0,remixes:0,shares:0}}}async getUserInteractions(r){try{return{hasLiked:!1,hasRemixed:!1,hasShared:!1}}catch(e){return console.error("Get user interactions error:",e),{hasLiked:!1,hasRemixed:!1,hasShared:!1}}}updateLocalCounts(r,e,s,a){const t={...a};return e==="like"?s==="add"?t[`${r}_likes`]=(t[`${r}_likes`]||0)+1:t[`${r}_likes`]=Math.max(0,(t[`${r}_likes`]||0)-1):e==="share"?s==="add"&&(t[`${r}_shares`]=(t[`${r}_shares`]||0)+1):e==="remix"&&s==="add"&&(t[`${r}_remixes`]=(t[`${r}_remixes`]||0)+1),t}}const u=new l;export{u as default,u as interactionService};
