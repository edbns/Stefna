import{r as f,P as g,A as h}from"./index-93f947a2.js";import{b}from"./payload-6b93731c.js";const d={auto:{strategy:"auto"},four_seasons:[{label:"Spring",use:"dreamy_pastels"},{label:"Summer",use:"sun_kissed"},{label:"Autumn",use:"moody_forest"},{label:"Winter",use:"frost_light"}],time_of_day:[{label:"Sunrise",use:"golden_hour_magic"},{label:"Day",use:"crystal_clear"},{label:"Sunset",use:"cinematic_glow"},{label:"Night",use:"neon_nights"}],mood_shift:[{label:"Calm",use:"crystal_clear",overrides:{prompt:"enhance clarity and sharpness, crisp details, clean and precise look, bright, airy, soft highlights"}},{label:"Vibrant",use:"vivid_pop"},{label:"Dramatic",use:"urban_grit"},{label:"Dreamy",use:"dreamy_pastels"}],style_remix:[{label:"Photorealistic",use:"crystal_clear"},{label:"Vintage Film",use:"vintage_film_35mm"},{label:"Pastels",use:"dreamy_pastels"},{label:"Neon Pop",use:"neon_nights"}]};function p(){return[...h.slice(0,6)].sort(()=>Math.random()-.5).slice(0,4).map((s,o)=>({label:`Shot ${o+1}`,use:s}))}function _(){return null}async function S(e){return console.log("🚀 Calling AIML API with payload:",e),{success:!0,resultUrl:"mock-result-url"}}async function w(e){return console.log("💾 Saving media to DB and Cloudinary:",e),{id:"mock-record-id",url:e.resultUrl}}function v(e){console.log("🎉 Adding result to UI:",e),window.dispatchEvent(new CustomEvent("generation-complete",{detail:{record:e,resultUrl:e.url,timestamp:Date.now()}}))}function c(e,t){console.log(`${e==="success"?"✅":"❌"} Toast: ${t}`),window.dispatchEvent(new CustomEvent(`generation-${e}`,{detail:{message:t,timestamp:Date.now()}}))}async function $(e){try{const t=d[e],s=_();if(!s){c("error","Pick a photo/video first, then select a story theme.");return}const o="strategy"in t?p():t,n=crypto.randomUUID();console.log(`📖 Starting story sequence: ${String(e)} (${o.length} beats)`);for(const[a,r]of o.entries())try{console.log(`🎬 Processing beat ${a+1}/4: ${r.label}`);const i=f(r.use,r.overrides),m=b({preset:i,src:s}),u=await S(m);if(!u.success){console.warn(`Beat ${a+1} failed, continuing with others`);continue}const y=await w(u);v({...y,storyLabel:r.label,storyKey:e,storyIndex:a+1,storyTotal:o.length})}catch(i){console.warn(`Beat ${a+1} (${r.label}) failed:`,i)}const l=String(e).replaceAll("_"," ");c("success",`Story: ${l} created`)}catch(t){console.error("Story sequence failed:",t),c("error","Story creation failed. Please try again.")}}function P(){return[{key:"auto",label:"Auto Mix",description:"4 random styles from current rotation"},{key:"four_seasons",label:"Four Seasons",description:"Spring, Summer, Autumn, Winter"},{key:"time_of_day",label:"Time of Day",description:"Sunrise, Day, Sunset, Night"},{key:"mood_shift",label:"Mood Shift",description:"Calm, Vibrant, Dramatic, Dreamy"},{key:"style_remix",label:"Style Remix",description:"Photo, Vintage, Pastels, Neon"}]}function k(){const e=[],t=new Set(Object.keys(g));return Object.entries(d).forEach(([s,o])=>{"strategy"in o||o.forEach((n,l)=>{t.has(n.use)||e.push(`Story theme "${s}" beat ${l+1} references missing preset "${n.use}"`)})}),e}export{P as getStoryThemes,$ as onStoryThemeClick,k as validateStoryThemes};
