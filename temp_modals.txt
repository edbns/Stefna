        )}
      </div>
      
      {/* Create Story Modal */}
      {showCreateStory && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-white bg-opacity-75">
          <div className="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            {/* Header */}
            <div className="flex justify-between items-center p-6 border-b border-gray-200">
              <h3 className="text-xl font-semibold">Create New Story</h3>
              <button
                onClick={() => setShowCreateStory(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>
            
            {/* Form */}
            <div className="p-6 space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
                <input
                  type="text"
                  value={newStory.title}
                  onChange={(e) => setNewStory({...newStory, title: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter story title"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Teaser</label>
                <textarea
                  value={newStory.teaser}
                  onChange={(e) => setNewStory({...newStory, teaser: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={3}
                  placeholder="Short description for the story teaser"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <select
                  value={newStory.category}
                  onChange={(e) => setNewStory({...newStory, category: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="fantasy">Fantasy</option>
                  <option value="sci-fi">Sci-Fi</option>
                  <option value="mystery">Mystery</option>
                  <option value="romance">Romance</option>
                  <option value="adventure">Adventure</option>
                  <option value="horror">Horror</option>
                  <option value="drama">Drama</option>
                  <option value="comedy">Comedy</option>
                  <option value="action">Action</option>
                  <option value="thriller">Thriller</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Keywords</label>
                <input
                  type="text"
                  value={newStory.keywords}
                  onChange={(e) => setNewStory({...newStory, keywords: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Enter keywords separated by commas"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Hero Image (URL or Upload)</label>
                <div className="space-y-2">
                  <input
                    type="text"
                    value={newStory.heroImageUrl}
                    onChange={(e) => setNewStory({...newStory, heroImageUrl: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter hero image URL"
                  />
                  <input
                    type="file"
                    accept="image/*"
                    multiple
                    onChange={(e) => {
                      if (e.target.files) {
                        setNewStory({...newStory, images: Array.from(e.target.files)})
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Full Content</label>
                <textarea
                  value={newStory.fullContent}
                  onChange={(e) => setNewStory({...newStory, fullContent: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={10}
                  placeholder="Enter the full story content..."
                />
              </div>
              
              {/* Image Preview */}
              {newStory.images.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Uploaded Images</label>
                  <div className="grid grid-cols-3 gap-4">
                    {newStory.images.map((file, index) => (
                      <div key={index} className="relative">
                        <img
                          src={URL.createObjectURL(file)}
                          alt={`Upload ${index + 1}`}
                          className="w-full h-24 object-cover rounded-lg"
                        />
                        <button
                          onClick={() => {
                            const newImages = newStory.images.filter((_, i) => i !== index)
                            setNewStory({...newStory, images: newImages})
                          }}
                          className="absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Actions */}
              <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                <button
                  onClick={() => setShowCreateStory(false)}
                  className="px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={createStory}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Create Story
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Story View Modal */}
      {selectedStory && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-white bg-opacity-75">
          <div className="bg-white rounded-lg max-w-6xl w-full mx-4 max-h-[95vh] overflow-y-auto">
            {/* Header */}
            <div className="flex justify-between items-center p-6 border-b border-gray-200">
              <h3 className="text-2xl font-semibold">{selectedStory.title}</h3>
              <button
                onClick={() => setSelectedStory(null)}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>
            
            {/* Content */}
            <div className="p-6 space-y-6">
              {/* Metadata */}
              <div className="flex items-center space-x-4 text-sm text-gray-600">
                <span className="px-2 py-1 bg-gray-100 rounded-full">
                  {selectedStory.storyCategory}
                </span>
                <span>{new Date(selectedStory.createdAt).toLocaleDateString()}</span>
                <span>{selectedStory.viewCount} views</span>
                <span className={`px-2 py-1 rounded-full ${
                  selectedStory.status === 'published' 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {selectedStory.status}
                </span>
              </div>
              
              {/* Hero Image */}
              {selectedStory.heroImageUrl && (
                <div>
                  <img
                    src={selectedStory.heroImageUrl}
                    alt={selectedStory.title}
                    className="w-full h-64 object-cover rounded-lg"
                    onError={(e) => {
                      e.currentTarget.src = '/placeholder-image.jpg'
                    }}
                  />
                </div>
              )}
              
              {/* Teaser */}
              <div>
                <h4 className="text-lg font-semibold mb-2">Teaser</h4>
                <p className="text-gray-700 leading-relaxed">{selectedStory.teaser}</p>
              </div>
              
              {/* Keywords */}
              {selectedStory.keywords && (
                <div>
                  <h4 className="text-lg font-semibold mb-2">Keywords</h4>
                  <p className="text-gray-600">{selectedStory.keywords}</p>
                </div>
              )}
              
              {/* Full Content */}
              <div>
                <h4 className="text-lg font-semibold mb-2">Full Story</h4>
                <div className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                  {selectedStory.full_content || selectedStory.fullContent || 'Content not available'}
                </div>
              </div>
              
              {/* Action Buttons */}
              <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                <button className="px-4 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50">
                  Edit
                </button>
                <button className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
