{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/getUserMedia.ts", "../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/_cloudinary.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-igpZ36tAQkgY",
  "sourcesContent": ["// netlify/functions/getUserMedia.ts\nimport { createClient } from '@supabase/supabase-js';\nimport { initCloudinary } from './_cloudinary';\n\nconst ok=(b:any)=>({statusCode:200,body:JSON.stringify(b)});\nconst err=(s:number,m:string)=>({statusCode:s,body:JSON.stringify({error:m})});\n\nfunction base64urlToJson(b64url:string){\n  const raw = b64url.replace(/-/g,'+').replace(/_/g,'/');\n  const pad = raw.length % 4 ? raw + '='.repeat(4 - (raw.length % 4)) : raw;\n  return JSON.parse(Buffer.from(pad,'base64').toString('utf8'));\n}\n\nfunction getJwt(event:any){\n  const h = event.headers?.authorization || event.headers?.Authorization;\n  const m = h && String(h).match(/^Bearer\\s+(.+)/i);\n  return m ? m[1] : null;\n}\n\nfunction decodeClaims(jwt:string|null){\n  if (!jwt) return null;\n  try {\n    const parts = jwt.split('.');\n    if (parts.length < 2) return null;\n    return base64urlToJson(parts[1]) || null;\n  } catch { return null; }\n}\n\nfunction pickUuidClaim(claims:any){\n  for (const k of ['sub','uid','user_id','userId','id']) {\n    const v = claims?.[k];\n    if (/^[0-9a-f-]{36}$/i.test(v)) return String(v);\n  }\n  return null;\n}\n\n// Resolve all possible user identifiers for legacy media lookup\nasync function resolveUserFromJWT(event: any, supabase: any) {\n  const jwt = getJwt(event);\n  if (!jwt) return { userId: null, identityId: null, email: null };\n\n  const claims = decodeClaims(jwt) || {};\n  const userId = pickUuidClaim(claims);\n  const email = claims.email || claims.mail || null;\n  \n  // Try to get identity ID from profiles table\n  let identityId = null;\n  if (userId) {\n    try {\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('id', userId)\n        .single();\n      identityId = profile?.id || null;\n    } catch (e) {\n      // Profile might not exist yet\n      console.log('No profile found for userId:', userId);\n    }\n  }\n\n  return { userId, identityId, email };\n}\n\n// Try multiple user ID formats to find legacy media\nasync function findMediaWithFallback(supabase: any, primaryUserId: string, identityId: string | null, email: string | null) {\n  let items = [];\n  \n  // Try primary user ID first\n  if (primaryUserId) {\n    const { data, error } = await supabase\n      .from('media_assets')\n      .select(`\n        id, user_id, visibility, allow_remix, created_at, env, prompt, model, mode,\n        url, result_url, meta\n      `)\n      .eq('user_id', primaryUserId)\n      .order('created_at', { ascending: false });\n    \n    if (!error && data) {\n      items = data;\n      console.log(`\u2705 Found ${items.length} media items for primary userId: ${primaryUserId}`);\n    }\n  }\n\n  // Fallback 1: Try identity ID if different from primary\n  if (items.length === 0 && identityId && identityId !== primaryUserId) {\n    const { data, error } = await supabase\n      .from('media_assets')\n      .select(`\n        id, user_id, visibility, allow_remix, created_at, env, prompt, model, mode,\n        url, result_url, meta\n      `)\n      .eq('user_id', identityId)\n      .order('created_at', { ascending: false });\n    \n    if (!error && data) {\n      items = data;\n      console.log(`\u2705 Found ${items.length} media items for identityId: ${identityId}`);\n      \n      // Enqueue background job to update ownerId for future queries\n      console.log(`\uD83D\uDD04 Legacy media found under identityId ${identityId}, consider migrating to userId ${primaryUserId}`);\n    }\n  }\n\n  // Fallback 2: Try email-based lookup for very legacy items\n  if (items.length === 0 && email) {\n    try {\n      const { data, error } = await supabase\n        .from('media_assets')\n        .select(`\n          id, user_id, visibility, allow_remix, created_at, env, prompt, model, mode,\n          url, result_url, meta\n        `)\n        .eq('meta->>email', email) // Assuming email is stored in meta\n        .order('created_at', { ascending: false });\n      \n      if (!error && data) {\n        items = data;\n        console.log(`\u2705 Found ${items.length} media items for email: ${email}`);\n        console.log(`\uD83D\uDD04 Very legacy media found under email ${email}, consider migrating to userId ${primaryUserId}`);\n      }\n    } catch (e) {\n      console.log('Email-based lookup not supported or failed:', e);\n    }\n  }\n\n  return items;\n}\n\nexport const handler = async (event:any) => {\n  // Check if we have Supabase credentials first - prioritize database\n  const { SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY } = process.env;\n  \n  if (SUPABASE_URL && SUPABASE_SERVICE_ROLE_KEY) {\n    try {\n      const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);\n\n      const { userId, identityId, email } = await resolveUserFromJWT(event, supabase);\n      if (!userId) return ok({ items: [] }); // invalid token = guest\n\n      const items = await findMediaWithFallback(supabase, userId, identityId, email);\n      console.log(`\u2705 Database query returned ${items.length} items for user ${userId}`);\n\n      return ok({ items });\n    } catch (e: any) {\n      console.error('[getUserMedia] Database query error:', e);\n      // Fall back to Cloudinary if database fails\n    }\n  }\n\n  // Fallback to Cloudinary-only mode if no Supabase or database fails\n  if (process.env.NO_DB_MODE === 'true') {\n    try {\n      const cloudinary = initCloudinary();\n      const qpUserId = event.queryStringParameters?.userId || '';\n      let userId = qpUserId;\n      if (!userId) {\n        const jwt = getJwt(event);\n        const claims = decodeClaims(jwt) || {};\n        userId = pickUuidClaim(claims) || '';\n      }\n      if (!userId) return ok({ ok:true, items: [] });\n\n      const exprUserTag = `tags=\\\"stefna\\\" AND tags=\\\"type:output\\\" AND tags=\\\"user:${userId}\\\"`;\n      const exprContext = `tags=\\\"stefna\\\" AND tags=\\\"type:output\\\" AND context.user_id=\\\"${userId}\\\"`;\n      const expr = `(${exprUserTag}) OR (${exprContext})`;\n\n      const res = await cloudinary.search\n        .expression(expr)\n        .sort_by('created_at','desc')\n        .max_results(100)\n        .execute();\n\n      const items = (res?.resources || []).map((r: any) => ({\n        id: r.public_id,\n        user_id: r.context?.custom?.user_id || userId,\n        resource_type: r.resource_type,\n        url: r.resource_type === 'video' ? r.secure_url : r.secure_url,\n        result_url: r.secure_url,\n        created_at: r.created_at,\n        visibility: (r.tags || []).includes('public') ? 'public' : 'private',\n        allow_remix: r.context?.custom?.allow_remix === 'true',\n        prompt: r.context?.custom?.prompt || null,\n        mode: r.context?.custom?.mode_meta ? JSON.parse(r.context?.custom?.mode_meta) : null,\n        meta: r.context?.custom || {},\n      }));\n\n      return ok({ ok:true, items });\n    } catch (e:any) {\n      console.error('[getUserMedia] error', e);\n      return err(500, e?.message || 'Internal server error');\n    }\n  }\n};\n", "import { v2 as cloudinary } from 'cloudinary';\n\nexport function assertCloudinaryEnv() {\n\tconst missing = [\n\t\t['CLOUDINARY_CLOUD_NAME', process.env.CLOUDINARY_CLOUD_NAME],\n\t\t['CLOUDINARY_API_KEY', process.env.CLOUDINARY_API_KEY],\n\t\t['CLOUDINARY_API_SECRET', process.env.CLOUDINARY_API_SECRET],\n\t].filter(([k, v]) => !v).map(([k]) => k as string);\n\tif (missing.length) {\n\t\tconst msg = `Missing Cloudinary env: ${missing.join(', ')}`;\n\t\tconsole.error('[cloudinary] ' + msg);\n\t\tconst err: any = new Error(msg);\n\t\terr.code = 'ENV_MISSING';\n\t\tthrow err;\n\t}\n}\n\nexport function initCloudinary() {\n\tassertCloudinaryEnv();\n\tcloudinary.config({\n\t\tcloud_name: process.env.CLOUDINARY_CLOUD_NAME!,\n\t\tapi_key: process.env.CLOUDINARY_API_KEY!,\n\t\tapi_secret: process.env.CLOUDINARY_API_SECRET!,\n\t\tsecure: true,\n\t});\n\treturn cloudinary;\n}\n"],
  "mappings": "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",
  "names": ["err", "cloudinary", "cloudinary"]
}
