{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/recordShare.ts", "../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/_cloudinary.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-vYCgGcewm1Po",
  "sourcesContent": ["// netlify/functions/recordShare.ts\nimport type { Handler } from '@netlify/functions';\nimport { initCloudinary, assertCloudinaryEnv } from './_cloudinary';\nimport { createClient } from '@supabase/supabase-js';\n\nconst url = process.env.SUPABASE_URL!;\nconst key = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst supabase = url && key ? createClient(url, key, { auth: { persistSession: false } }) : null as any;\n\nfunction getUserIdFromToken(auth?: string): string | null {\n  try {\n    if (!auth?.startsWith('Bearer ')) return null;\n    const jwt = auth.slice(7);\n    const payload = JSON.parse(Buffer.from(jwt.split('.')[1], 'base64').toString());\n    const id = payload.sub || payload.uid || payload.user_id || payload.userId || payload.id;\n    return /^[0-9a-f-]{36}$/i.test(id) ? id : null;\n  } catch {\n    return null;\n  }\n}\n\nasync function resolvePublicIdByAssetId(cloudinary: any, assetId: string): Promise<string | null> {\n  const expr = `tags=\\\"stefna\\\" AND context.asset_id=\\\"${assetId}\\\"`;\n  const maxAttempts = 6;\n  const delayMs = 300;\n  for (let i = 0; i < maxAttempts; i++) {\n    const found = await cloudinary.search.expression(expr).max_results(1).execute();\n    const pid = found?.resources?.[0]?.public_id as string | undefined;\n    if (pid) return pid;\n    await new Promise(r => setTimeout(r, delayMs));\n  }\n  return null;\n}\n\nexport const handler: Handler = async (event) => {\n  try {\n    if (event.httpMethod !== 'POST') {\n      return { statusCode: 405, body: JSON.stringify({ ok:false, error: 'Method not allowed' }) };\n    }\n\n    const body = JSON.parse(event.body || '{}');\n\n    // Cloudinary-only path\n    if (process.env.NO_DB_MODE === 'true') {\n      let publicId: string | undefined = body.publicId as string | undefined;\n      const allowRemix: boolean = !!body.allowRemix;\n      const assetId: string | undefined = (body.assetId || body.asset_id) as string | undefined;\n      if (!publicId && !assetId) {\n        return { statusCode: 400, body: JSON.stringify({ ok:false, error:'MISSING: publicId (or assetId)' }) };\n      }\n      try {\n        assertCloudinaryEnv();\n        const cloudinary = initCloudinary();\n        // Resolve from assetId using context if needed, with retry (indexing delay)\n        if (!publicId && assetId) {\n          publicId = await resolvePublicIdByAssetId(cloudinary, assetId);\n          if (!publicId) {\n            return { statusCode: 404, body: JSON.stringify({ ok:false, error:`No Cloudinary asset found for assetId ${assetId}` }) };\n          }\n        }\n        // ensure base tags & publish tag\n        await cloudinary.api.add_tag('stefna', [publicId!]);\n        await cloudinary.api.add_tag('type:output', [publicId!]);\n        await cloudinary.api.add_tag('public', [publicId!]);\n        await cloudinary.uploader.explicit(publicId!, {\n          type: 'upload',\n          context: { allow_remix: allowRemix ? 'true' : 'false', published_at: new Date().toISOString() },\n        });\n        return { statusCode: 200, body: JSON.stringify({ ok:true }) };\n      } catch (e:any) {\n        const msg = e?.message || 'unknown error';\n        console.error('[recordShare] cloudinary error', msg);\n        return { statusCode: 400, body: JSON.stringify({ ok:false, error: msg }) };\n      }\n    }\n\n    // DB MODE (legacy)\n    const userId = getUserIdFromToken(event.headers.authorization);\n    if (!userId) {\n      return { statusCode: 401, body: JSON.stringify({ ok:false, error: 'Unauthorized' }) };\n    }\n\n    const { asset_id, shareToFeed, allowRemix } = body;\n    if (!asset_id) {\n      return { statusCode: 400, body: JSON.stringify({ ok:false, error: 'asset_id required' }) };\n    }\n\n    const is_public = !!shareToFeed;\n    const allow_remix = !!shareToFeed && !!allowRemix;\n\n    const { data, error } = await (supabase as any)\n      .from('assets')\n      .update({ is_public, allow_remix })\n      .eq('id', asset_id)\n      .eq('user_id', userId)\n      .select('id, is_public, allow_remix, published_at')\n      .single();\n\n    if (error) {\n      return { statusCode: 400, body: JSON.stringify({ ok:false, error: error.message }) };\n    }\n\n    return { statusCode: 200, body: JSON.stringify({ ok:true, asset: data }) };\n  } catch (e: any) {\n    const msg = e?.message || 'unknown error';\n    console.error('recordShare error:', msg);\n    return { statusCode: 500, body: JSON.stringify({ ok:false, error: msg }) };\n  }\n};\n\n\n", "import { v2 as cloudinary } from 'cloudinary';\n\nexport function assertCloudinaryEnv() {\n\tconst missing = [\n\t\t['CLOUDINARY_CLOUD_NAME', process.env.CLOUDINARY_CLOUD_NAME],\n\t\t['CLOUDINARY_API_KEY', process.env.CLOUDINARY_API_KEY],\n\t\t['CLOUDINARY_API_SECRET', process.env.CLOUDINARY_API_SECRET],\n\t].filter(([k, v]) => !v).map(([k]) => k as string);\n\tif (missing.length) {\n\t\tconst msg = `Missing Cloudinary env: ${missing.join(', ')}`;\n\t\tconsole.error('[cloudinary] ' + msg);\n\t\tconst err: any = new Error(msg);\n\t\terr.code = 'ENV_MISSING';\n\t\tthrow err;\n\t}\n}\n\nexport function initCloudinary() {\n\tassertCloudinaryEnv();\n\tcloudinary.config({\n\t\tcloud_name: process.env.CLOUDINARY_CLOUD_NAME!,\n\t\tapi_key: process.env.CLOUDINARY_API_KEY!,\n\t\tapi_secret: process.env.CLOUDINARY_API_SECRET!,\n\t\tsecure: true,\n\t});\n\treturn cloudinary;\n}\n"],
  "mappings": "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",
  "names": ["cloudinary", "cloudinary", "allowRemix"]
}
