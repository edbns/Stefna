{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/admin-upgrade-user.js"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-n1GTbvgipVHA",
  "sourcesContent": ["const { createClient } = require('@supabase/supabase-js');\n\nexports.handler = async (event, context) => {\n  // Handle CORS\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Allow-Methods': 'POST'\n      },\n      body: ''\n    };\n  }\n\n  // Only allow POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    const { email, newTier, adminSecret } = JSON.parse(event.body);\n\n    // Validate admin secret (you should change this to a secure secret)\n    const expectedSecret = process.env.ADMIN_SECRET || 'stefna-admin-2024';\n    if (adminSecret !== expectedSecret) {\n      return {\n        statusCode: 401,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ error: 'Unauthorized' })\n      };\n    }\n\n    // Validate input\n    if (!email || !newTier) {\n      return {\n        statusCode: 400,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ error: 'Email and newTier are required' })\n      };\n    }\n\n    // Validate tier\n    const validTiers = ['registered', 'verified', 'contributor'];\n    if (!validTiers.includes(newTier)) {\n      return {\n        statusCode: 400,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ error: 'Invalid tier. Must be one of: registered, verified, contributor' })\n      };\n    }\n\n    // Connect to Supabase\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n    \n    if (!supabaseUrl || !supabaseKey) {\n      console.error('Missing Supabase environment variables');\n      return {\n        statusCode: 500,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ error: 'Database configuration error' })\n      };\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseKey);\n\n    // Find user by email\n    const { data: user, error: userError } = await supabase\n      .from('users')\n      .select('*')\n      .eq('email', email)\n      .single();\n\n    if (userError) {\n      if (userError.code === 'PGRST116') {\n        return {\n          statusCode: 404,\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ error: 'User not found' })\n        };\n      }\n      throw userError;\n    }\n\n    // Update user tier\n    const { data: updatedUser, error: updateError } = await supabase\n      .from('users')\n      .update({ \n        tier: newTier\n      })\n      .eq('email', email)\n      .select()\n      .single();\n\n    if (updateError) {\n      throw updateError;\n    }\n\n    console.log(`\u2705 Successfully upgraded user ${email} to ${newTier} tier`);\n\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        success: true,\n        message: `User ${email} successfully upgraded to ${newTier} tier`,\n        user: updatedUser\n      })\n    };\n\n  } catch (error) {\n    console.error('Admin upgrade error:', error);\n    return {\n      statusCode: 500,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ \n        error: error.message || 'Internal server error' \n      })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
