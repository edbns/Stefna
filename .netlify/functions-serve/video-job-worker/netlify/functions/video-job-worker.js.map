{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/video-job-worker.ts", "../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/_cloudinary.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-c7Hze5lQviWU",
  "sourcesContent": ["// /.netlify/functions/video-job-worker.ts\nimport type { Handler } from '@netlify/functions';\nimport { createClient } from '@supabase/supabase-js';\nimport { initCloudinary } from './_cloudinary';\n\nconst SUPABASE_URL = process.env.SUPABASE_URL!;\nconst SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!;\nconst AIML_API_KEY = process.env.AIML_API_KEY!;\nconst AIML_V2V_ENDPOINT = process.env.AIML_V2V_ENDPOINT || 'https://api.aimlapi.com/v1/video-to-video';\nconst V2V_WEBHOOK_SECRET = process.env.V2V_WEBHOOK_SECRET || '';\n\n// Story Mode constants\nconst CLARITY_BOOST_HARD = \"maximize micro-contrast and fine detail; razor-sharp edges; crisp textures (hair, neoprene seams, surfboard wax); strictly no halos or oversharpening artifacts; preserve natural skin texture\";\nconst SURFER_POS_LOCK = \"same subject, adult male surfer, holding a surfboard, same clothing and gear, same pose and camera angle, same composition on a beach with ocean waves\";\nconst SURFER_NEG_DRIFT = \"female, woman, girl, bikini, makeup glam, banana, banana boat, inflatable, kayak, canoe, raft, jetski, paddle, oar, dinghy, extra people, different subject, face swap, body swap\";\n\n// Process Story Mode job: generate 4 stills and stitch into MP4\nasync function processStoryJob(supabase: any, job: any, job_id: string) {\n  const cloudinary = initCloudinary();\n  const shotFiles: string[] = [];\n  \n  try {\n    // 1) Generate each shot via I2I\n    for (let i = 0; i < job.shotlist.length; i++) {\n      const shot = job.shotlist[i];\n      const shotPrompt = `${job.prompt}. ${shot.add}. ${CLARITY_BOOST_HARD}. ${SURFER_POS_LOCK}`;\n      const negativePrompt = `${job.params.negative}, ${SURFER_NEG_DRIFT}`;\n      \n      console.log(`[Story] Generating shot ${i + 1}/${job.shotlist.length}: ${shot.name}`);\n      \n      const payload = {\n        model: job.model,\n        prompt: shotPrompt,\n        negative_prompt: negativePrompt,\n        image_url: job.source_url,\n        strength: job.params.strength,\n        num_inference_steps: job.params.steps,\n        guidance_scale: job.params.guidance,\n        seed: Date.now() + i, // Different seed per shot\n      };\n      \n      const response = await fetch('https://api.aimlapi.com/v1/images/generations', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${AIML_API_KEY}` },\n        body: JSON.stringify(payload)\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Shot ${i + 1} failed: ${response.status} ${await response.text()}`);\n      }\n      \n      const result = await response.json();\n      const imageUrl = result?.images?.[0]?.url || result?.data?.[0]?.url;\n      if (!imageUrl) {\n        throw new Error(`Shot ${i + 1}: No image URL in response`);\n      }\n      \n      // Download and save temporarily\n      const imageResponse = await fetch(imageUrl);\n      const imageBuffer = await imageResponse.arrayBuffer();\n      const fs = require('fs');\n      const path = require('path');\n      const tempDir = '/tmp';\n      const shotFile = path.join(tempDir, `shot_${i + 1}.jpg`);\n      fs.writeFileSync(shotFile, Buffer.from(imageBuffer));\n      shotFiles.push(shotFile);\n      \n      // Update progress\n      const progress = Math.round(((i + 1) / job.shotlist.length) * 80); // 80% for generation\n      await supabase.from('video_jobs').update({ progress }).eq('id', job_id);\n    }\n    \n    // 2) Stitch into MP4 using ffmpeg\n    console.log('[Story] Stitching shots into MP4...');\n    const { execSync } = require('child_process');\n    const outputFile = '/tmp/story.mp4';\n    \n    // Build ffmpeg command for 4 shots with Ken Burns effect and crossfades\n    const duration = 2.6; // seconds per shot\n    const fadeDuration = 0.4; // crossfade duration\n    \n    const ffmpegCmd = `\n      ffmpeg -y \\\\\n        -loop 1 -t ${duration} -i ${shotFiles[0]} \\\\\n        -loop 1 -t ${duration} -i ${shotFiles[1]} \\\\\n        -loop 1 -t ${duration} -i ${shotFiles[2]} \\\\\n        -loop 1 -t ${duration} -i ${shotFiles[3]} \\\\\n        -filter_complex \"\n        [0:v]scale=${job.width}:${job.height},zoompan=z='min(zoom+0.0015,1.08)':d=${Math.round(duration * job.fps)}:s=${job.width}x${job.height}:fps=${job.fps},format=yuv420p[v0];\n        [1:v]scale=${job.width}:${job.height},zoompan=z='min(zoom+0.0015,1.08)':d=${Math.round(duration * job.fps)}:s=${job.width}x${job.height}:fps=${job.fps},format=yuv420p[v1];\n        [2:v]scale=${job.width}:${job.height},zoompan=z='min(zoom+0.0015,1.08)':d=${Math.round(duration * job.fps)}:s=${job.width}x${job.height}:fps=${job.fps},format=yuv420p[v2];\n        [3:v]scale=${job.width}:${job.height},zoompan=z='min(zoom+0.0015,1.08)':d=${Math.round(duration * job.fps)}:s=${job.width}x${job.height}:fps=${job.fps},format=yuv420p[v3];\n        [v0][v1]xfade=transition=fade:duration=${fadeDuration}:offset=${duration}[v01];\n        [v01][v2]xfade=transition=fade:duration=${fadeDuration}:offset=${duration * 2}[v012];\n        [v012][v3]xfade=transition=fade:duration=${fadeDuration}:offset=${duration * 3}[v]\n        \" -map \"[v]\" -c:v libx264 -pix_fmt yuv420p -profile:v high -level 4.1 -movflags +faststart ${outputFile}\n    `.replace(/\\s+/g, ' ').trim();\n    \n    execSync(ffmpegCmd, { stdio: 'inherit' });\n    \n    // 3) Upload to Cloudinary\n    console.log('[Story] Uploading MP4 to Cloudinary...');\n    const visibilityTag = (job.visibility || 'private') === 'public' ? 'public' : undefined;\n    const tags = ['stefna', 'type:story', `user:${job.user_id}`].concat(visibilityTag ? [visibilityTag] : []);\n    \n    const upload = await (cloudinary as any).uploader.upload(outputFile, {\n      resource_type: 'video',\n      folder: `stefna/stories/${job.user_id}`,\n      tags,\n      context: {\n        user_id: job.user_id,\n        created_at: new Date().toISOString(),\n        job_id,\n        type: 'story'\n      },\n      overwrite: true,\n      invalidate: true,\n    });\n    \n    if (!upload?.public_id || !upload?.secure_url) {\n      throw new Error('Cloudinary upload failed');\n    }\n    \n    // 4) Mark job completed\n    await supabase\n      .from('video_jobs')\n      .update({ status: 'completed', output_url: upload.secure_url, progress: 100 })\n      .eq('id', job_id);\n    \n    // Clean up temp files\n    shotFiles.forEach(file => {\n      try { require('fs').unlinkSync(file); } catch (e) {}\n    });\n    try { require('fs').unlinkSync(outputFile); } catch (e) {}\n    \n    return { statusCode: 200, body: JSON.stringify({ ok: true, job_id, result_url: upload.secure_url, public_id: upload.public_id, type: 'story' }) };\n    \n  } catch (error: any) {\n    console.error('[Story] Error:', error);\n    await supabase.from('video_jobs').update({ status: 'failed', error: error.message?.slice(0, 2000) || 'failed' }).eq('id', job_id);\n    \n    // Clean up temp files on error\n    shotFiles.forEach(file => {\n      try { require('fs').unlinkSync(file); } catch (e) {}\n    });\n    \n    return { statusCode: 200, body: JSON.stringify({ ok: false, job_id, error: error.message }) };\n  }\n}\n\nexport const handler: Handler = async (event) => {\n  if (event.httpMethod !== 'POST') return { statusCode: 405, body: 'Method not allowed' };\n  const secret = event.headers['x-internal'];\n  if (secret !== '1') return { statusCode: 403, body: 'Forbidden' };\n\n  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);\n  const { job_id } = JSON.parse(event.body || '{}');\n  if (!job_id) return { statusCode: 400, body: 'job_id required' };\n\n  // Try to load job from video_jobs first (for Story Mode), then ai_generations (for V2V)\n  let job: any = null;\n  let isStoryJob = false;\n  \n  // First try video_jobs table for Story Mode jobs\n  try {\n    const { data: storyJob, error: storyErr } = await supabase\n      .from('video_jobs')\n      .select('id,user_id,source_url,prompt,model,params,shotlist,fps,width,height,allow_remix,visibility,type,status')\n      .eq('id', job_id)\n      .single();\n    \n    if (storyJob && !storyErr) {\n      job = storyJob;\n      isStoryJob = true;\n    }\n  } catch (e) {\n    // video_jobs table might not exist, continue to ai_generations\n  }\n  \n  // If not found in video_jobs, try ai_generations for regular V2V jobs\n  if (!job) {\n    const { data: v2vJob, error: v2vErr } = await supabase\n      .from('ai_generations')\n      .select('id,user_id,input_url,preset,visibility,status')\n      .eq('id', job_id)\n      .single();\n    \n    if (v2vErr || !v2vJob) return { statusCode: 404, body: 'Job not found' };\n    job = v2vJob;\n  }\n\n  if (job.status !== 'queued') return { statusCode: 200, body: JSON.stringify({ ok:true, message:'Already handled', status: job.status }) };\n\n  // Mark processing in the appropriate table\n  const updateTable = isStoryJob ? 'video_jobs' : 'ai_generations';\n  await supabase.from(updateTable).update({ status: 'processing', progress: 1 }).eq('id', job_id);\n\n  try {\n    // Handle Story Mode jobs differently\n    if (isStoryJob && job.type === 'story') {\n      return await processStoryJob(supabase, job, job_id);\n    }\n    // 1) Submit to provider\n    const base = process.env.URL || process.env.DEPLOY_URL || process.env.DEPLOY_PRIME_URL || '';\n    const callbackUrl = base ? `${base}/.netlify/functions/v2v-webhook` : undefined;\n\n    const payload: Record<string, any> = {\n      model: 'flux/dev/video-to-video',\n      prompt: job.preset || 'stylize',\n      video_url: job.input_url,\n      strength: 0.85,\n      num_inference_steps: 36,\n      guidance_scale: 7.5,\n    };\n    if (callbackUrl) payload.callback_url = callbackUrl;\n    if (V2V_WEBHOOK_SECRET) payload.webhook_secret = V2V_WEBHOOK_SECRET;\n    // Common pattern for providers to echo back metadata\n    payload.metadata = { jobId: job_id };\n\n    const pRes = await fetch(AIML_V2V_ENDPOINT, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${AIML_API_KEY}` },\n      body: JSON.stringify(payload)\n    });\n\n    if (!pRes.ok) {\n      const t = await pRes.text();\n      throw new Error(`Provider error ${pRes.status}: ${t}`);\n    }\n\n    const provider = await pRes.json();\n    let resultUrl: string | null = provider.result_url || null;\n    let providerJobId = provider.job_id || provider.id || null;\n\n    // 2) Poll if needed (fallback if provider does not push webhooks)\n    if (!resultUrl && providerJobId) {\n      const statusUrl = `${AIML_V2V_ENDPOINT}/${providerJobId}`;\n      const started = Date.now();\n      while (Date.now() - started < 420000) { // up to 7 minutes\n        await new Promise(r => setTimeout(r, 3000));\n        const sRes = await fetch(statusUrl, { headers: { Authorization: `Bearer ${AIML_API_KEY}` }});\n        const sJson = await sRes.json();\n        try { await supabase.from(updateTable).update({ status: 'processing' }).eq('id', job_id); } catch {}\n        if ((sJson.status === 'succeeded' || sJson.state === 'completed') && (sJson.result_url || sJson.outputUrl)) {\n          resultUrl = sJson.result_url || sJson.outputUrl;\n          break;\n        }\n        if (sJson.status === 'failed' || sJson.status === 'canceled' || sJson.state === 'failed') {\n          throw new Error(`Provider job ${sJson.status || sJson.state}: ${sJson.error || ''}`);\n        }\n      }\n    }\n\n    if (!resultUrl) {\n      // If webhooks are configured, they will finalize the job; otherwise timeout\n      throw new Error('No result_url from provider');\n    }\n\n    // 3) Upload result to Cloudinary to power the public feed\n    const cloudinary = initCloudinary();\n    const visibilityTag = (job.visibility || 'private') === 'public' ? 'public' : undefined;\n    const tags = ['stefna', 'type:output', `user:${job.user_id}`].concat(visibilityTag ? [visibilityTag] : []);\n\n    const upload = await (cloudinary as any).uploader.upload(resultUrl, {\n      resource_type: 'video',\n      folder: `stefna/outputs/${job.user_id}`,\n      tags,\n      context: {\n        user_id: job.user_id,\n        created_at: new Date().toISOString(),\n        job_id,\n        provider_job_id: providerJobId || ''\n      },\n      overwrite: true,\n      invalidate: true,\n    });\n\n    if (!upload?.public_id || !upload?.secure_url) {\n      throw new Error('Cloudinary upload failed or missing public_id/secure_url');\n    }\n\n    // 4) Mark job succeeded in the appropriate table\n    await supabase\n      .from(updateTable)\n      .update({ status: 'completed', output_url: upload.secure_url, progress: 100 })\n      .eq('id', job_id);\n\n    return { statusCode: 200, body: JSON.stringify({ ok:true, job_id, result_url: upload.secure_url, public_id: upload.public_id }) };\n  } catch (e:any) {\n    await supabase.from(updateTable).update({ status:'failed', error: e.message?.slice(0, 2000) || 'failed' }).eq('id', job_id);\n    return { statusCode: 200, body: JSON.stringify({ ok:false, job_id, error: e.message }) };\n  }\n};\n", "import { v2 as cloudinary } from 'cloudinary';\n\nexport function assertCloudinaryEnv() {\n\tconst missing = [\n\t\t['CLOUDINARY_CLOUD_NAME', process.env.CLOUDINARY_CLOUD_NAME],\n\t\t['CLOUDINARY_API_KEY', process.env.CLOUDINARY_API_KEY],\n\t\t['CLOUDINARY_API_SECRET', process.env.CLOUDINARY_API_SECRET],\n\t].filter(([k, v]) => !v).map(([k]) => k as string);\n\tif (missing.length) {\n\t\tconst msg = `Missing Cloudinary env: ${missing.join(', ')}`;\n\t\tconsole.error('[cloudinary] ' + msg);\n\t\tconst err: any = new Error(msg);\n\t\terr.code = 'ENV_MISSING';\n\t\tthrow err;\n\t}\n}\n\nexport function initCloudinary() {\n\tassertCloudinaryEnv();\n\tcloudinary.config({\n\t\tcloud_name: process.env.CLOUDINARY_CLOUD_NAME!,\n\t\tapi_key: process.env.CLOUDINARY_API_KEY!,\n\t\tapi_secret: process.env.CLOUDINARY_API_SECRET!,\n\t\tsecure: true,\n\t});\n\treturn cloudinary;\n}\n"],
  "mappings": "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",
  "names": ["cloudinary", "cloudinary"]
}
