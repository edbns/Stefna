{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/getPublicFeed.ts", "../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/_cloudinary.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-uU0rlCRtjttc",
  "sourcesContent": ["// netlify/functions/getPublicFeed.ts\nimport { Handler } from '@netlify/functions';\nimport { createClient } from '@supabase/supabase-js';\nimport { initCloudinary, assertCloudinaryEnv } from './_cloudinary';\n\nconst supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!);\n\nexport const handler: Handler = async (event) => {\n  if (process.env.NO_DB_MODE !== 'true') {\n    return { statusCode: 412, body: JSON.stringify({ ok:false, error:'NO_DB_MODE=false (DB mode disabled here)' }) };\n  }\n\n  try {\n    assertCloudinaryEnv();\n    const cloudinary = initCloudinary();\n\n    const url = new URL(event.rawUrl);\n    const limit = Number(url.searchParams.get('limit') ?? 50);\n\n    const res = await cloudinary.search\n      .expression('(tags=\"stefna\" AND tags=\"type:output\" AND tags=\"public\") AND (resource_type:image OR resource_type:video)')\n      .sort_by('created_at','desc')\n      .max_results(limit)\n      .execute();\n\n    const data = (res?.resources || []).map((r: any) => ({\n      id: r.public_id,\n      cloudinary_public_id: r.public_id,\n      media_type: r.resource_type === 'video' ? 'video' : 'image',\n      published_at: r.created_at,\n      preset_key: r.context?.custom?.preset_key || null,\n      source_public_id: r.context?.custom?.source_public_id || null,\n      user_id: r.context?.custom?.user_id || r.context?.user_id || null,\n      user_avatar: null, // Not stored in Cloudinary context\n      user_tier: null, // Not stored in Cloudinary context\n      prompt: r.context?.custom?.prompt || null, // Extract prompt from Cloudinary context\n    }));\n\n    return { statusCode: 200, body: JSON.stringify({ ok:true, source:'cloudinary', data }) };\n  } catch (e: any) {\n    const msg = e?.message || e?.error?.message || e?.error || 'unknown error';\n    const code = e?.code || 'UNKNOWN';\n    console.error('[getPublicFeed] error', { code, msg, raw:e });\n    return { statusCode: 400, body: JSON.stringify({ ok:false, error:`${code}: ${msg}` }) };\n  }\n};\n", "import { v2 as cloudinary } from 'cloudinary';\n\nexport function assertCloudinaryEnv() {\n\tconst missing = [\n\t\t['CLOUDINARY_CLOUD_NAME', process.env.CLOUDINARY_CLOUD_NAME],\n\t\t['CLOUDINARY_API_KEY', process.env.CLOUDINARY_API_KEY],\n\t\t['CLOUDINARY_API_SECRET', process.env.CLOUDINARY_API_SECRET],\n\t].filter(([k, v]) => !v).map(([k]) => k as string);\n\tif (missing.length) {\n\t\tconst msg = `Missing Cloudinary env: ${missing.join(', ')}`;\n\t\tconsole.error('[cloudinary] ' + msg);\n\t\tconst err: any = new Error(msg);\n\t\terr.code = 'ENV_MISSING';\n\t\tthrow err;\n\t}\n}\n\nexport function initCloudinary() {\n\tassertCloudinaryEnv();\n\tcloudinary.config({\n\t\tcloud_name: process.env.CLOUDINARY_CLOUD_NAME!,\n\t\tapi_key: process.env.CLOUDINARY_API_KEY!,\n\t\tapi_secret: process.env.CLOUDINARY_API_SECRET!,\n\t\tsecure: true,\n\t});\n\treturn cloudinary;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,yBAA6B;;;ACF7B,wBAAiC;AAE1B,SAAS,sBAAsB;AACrC,QAAM,UAAU;AAAA,IACf,CAAC,yBAAyB,QAAQ,IAAI,qBAAqB;AAAA,IAC3D,CAAC,sBAAsB,QAAQ,IAAI,kBAAkB;AAAA,IACrD,CAAC,yBAAyB,QAAQ,IAAI,qBAAqB;AAAA,EAC5D,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAW;AACjD,MAAI,QAAQ,QAAQ;AACnB,UAAM,MAAM,2BAA2B,QAAQ,KAAK,IAAI,CAAC;AACzD,YAAQ,MAAM,kBAAkB,GAAG;AACnC,UAAM,MAAW,IAAI,MAAM,GAAG;AAC9B,QAAI,OAAO;AACX,UAAM;AAAA,EACP;AACD;AAEO,SAAS,iBAAiB;AAChC,sBAAoB;AACpB,oBAAAA,GAAW,OAAO;AAAA,IACjB,YAAY,QAAQ,IAAI;AAAA,IACxB,SAAS,QAAQ,IAAI;AAAA,IACrB,YAAY,QAAQ,IAAI;AAAA,IACxB,QAAQ;AAAA,EACT,CAAC;AACD,SAAO,kBAAAA;AACR;;;ADrBA,IAAM,eAAW,iCAAa,QAAQ,IAAI,cAAe,QAAQ,IAAI,yBAA0B;AAExF,IAAM,UAAmB,OAAO,UAAU;AAC/C,MAAI,QAAQ,IAAI,eAAe,QAAQ;AACrC,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,OAAO,OAAM,2CAA2C,CAAC,EAAE;AAAA,EACjH;AAEA,MAAI;AACF,wBAAoB;AACpB,UAAMC,cAAa,eAAe;AAElC,UAAM,MAAM,IAAI,IAAI,MAAM,MAAM;AAChC,UAAM,QAAQ,OAAO,IAAI,aAAa,IAAI,OAAO,KAAK,EAAE;AAExD,UAAM,MAAM,MAAMA,YAAW,OAC1B,WAAW,2GAA2G,EACtH,QAAQ,cAAa,MAAM,EAC3B,YAAY,KAAK,EACjB,QAAQ;AAEX,UAAM,QAAQ,KAAK,aAAa,CAAC,GAAG,IAAI,CAAC,OAAY;AAAA,MACnD,IAAI,EAAE;AAAA,MACN,sBAAsB,EAAE;AAAA,MACxB,YAAY,EAAE,kBAAkB,UAAU,UAAU;AAAA,MACpD,cAAc,EAAE;AAAA,MAChB,YAAY,EAAE,SAAS,QAAQ,cAAc;AAAA,MAC7C,kBAAkB,EAAE,SAAS,QAAQ,oBAAoB;AAAA,MACzD,SAAS,EAAE,SAAS,QAAQ,WAAW,EAAE,SAAS,WAAW;AAAA,MAC7D,aAAa;AAAA;AAAA,MACb,WAAW;AAAA;AAAA,MACX,QAAQ,EAAE,SAAS,QAAQ,UAAU;AAAA;AAAA,IACvC,EAAE;AAEF,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,MAAM,QAAO,cAAc,KAAK,CAAC,EAAE;AAAA,EACzF,SAAS,GAAQ;AACf,UAAM,MAAM,GAAG,WAAW,GAAG,OAAO,WAAW,GAAG,SAAS;AAC3D,UAAM,OAAO,GAAG,QAAQ;AACxB,YAAQ,MAAM,yBAAyB,EAAE,MAAM,KAAK,KAAI,EAAE,CAAC;AAC3D,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,OAAO,OAAM,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,EAAE;AAAA,EACxF;AACF;",
  "names": ["cloudinary", "cloudinary"]
}
