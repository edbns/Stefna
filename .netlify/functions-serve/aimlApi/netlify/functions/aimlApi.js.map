{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/aimlApi.js"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-9tndhF79ypI2",
  "sourcesContent": ["// Minimal I2I-only images endpoint with clear errors\nconst pickUrl = (j) =>\n  j?.images?.[0]?.url ?? j?.data?.[0]?.url ?? j?.videos?.[0]?.url ?? j?.result_url ?? null;\n\nconst bad = (s, m) => ({\n  statusCode: s,\n  body: typeof m === 'string' ? JSON.stringify({ error: m }) : JSON.stringify(m),\n});\n\nconst ok = (b) => ({\n  statusCode: 200,\n  body: JSON.stringify(b),\n});\n\nconst clamp = (n, lo, hi) => Math.min(Math.max(n, lo), hi);\n\nexports.handler = async (event) => {\n  console.log('[aimlApi]', { \n    method: event.httpMethod, \n    hasAuth: !!(event.headers?.authorization), \n    now: new Date().toISOString() \n  });\n  \n  try {\n    if (event.httpMethod !== 'POST') return bad(405, 'Method Not Allowed');\n\n    // Validate env early (so you never get a generic 500)\n    if (!process.env.AIML_API_KEY) {\n      return bad(500, 'AIML_API_KEY is not configured in this deploy');\n    }\n\n    // Parse body\n    let body = {};\n    try { body = JSON.parse(event.body || '{}'); }\n    catch { return bad(400, 'Invalid JSON body'); }\n\n    // Input validation\n    const image_url = body.image_url;\n    const resource_type = body.resource_type || 'image';\n    const request_id = body.request_id || crypto.randomUUID();\n    \n    if (resource_type === 'video') {\n      return bad(501, {\n        error: 'Video editing not enabled yet',\n        hint: 'We are wiring asynchronous video jobs. Please try an image for now.',\n      });\n    }\n    \n    if (!image_url || !/^https?:\\/\\//i.test(image_url) || image_url.includes('...')) {\n      return bad(400, 'image_url must be a full https URL (no \"...\")');\n    }\n\n    // Extract JWT and get user ID\n    const auth = event.headers?.authorization || '';\n    const token = auth.replace(/^Bearer\\s+/i, '');\n    if (!token) return bad(401, 'Missing Authorization token');\n\n    // Decode JWT to get user ID\n    const claims = JSON.parse(Buffer.from((token.split('.')[1] || ''), 'base64').toString() || '{}');\n    const userId = claims.sub || claims.uid || claims.user_id || claims.userId || claims.id;\n    if (!userId || !/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(userId)) {\n      return bad(401, 'Invalid user token');\n    }\n\n    // Auto-detect environment\n    const APP_ENV = /netlify\\.app$/i.test(event.headers.host || '') ? 'dev' : 'prod';\n\n    const payload = {\n      model: 'flux/dev/image-to-image',\n      prompt: String(body.prompt || 'stylize').trim(),\n      image_url,\n      strength: clamp(Number(body.strength ?? 0.75), 0.4, 0.95),\n      num_inference_steps: Math.round(clamp(Number(body.num_inference_steps ?? body.steps ?? 36), 1, 150)),\n      guidance_scale: Number.isFinite(body.guidance_scale) ? body.guidance_scale : 7.5,\n      seed: body.seed || Date.now(), // Add seed to prevent provider-side caching\n    };\n\n    console.log('[aimlApi] calling AIML with:', { \n      prompt: payload.prompt, \n      strength: payload.strength, \n      steps: payload.num_inference_steps,\n      guidance: payload.guidance_scale,\n      userId,\n      request_id,\n      env: APP_ENV\n    });\n\n    // Call AIML with timeout protection\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout\n    \n    try {\n      const resp = await fetch('https://api.aimlapi.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${process.env.AIML_API_KEY}`,\n        },\n        body: JSON.stringify(payload),\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!resp.ok) {\n        const errorText = await resp.text();\n        console.error('[aimlApi] AIML API error:', resp.status, errorText);\n        return bad(502, `AIML API error: ${resp.status} - ${errorText}`);\n      }\n\n      const result = await resp.json();\n      const imageUrl = pickUrl(result);\n\n      if (!imageUrl) {\n        console.error('[aimlApi] No image URL in AIML response:', result);\n        return bad(502, 'No image URL returned from AIML API');\n      }\n\n      console.log('[aimlApi] Success:', { imageUrl, userId, request_id, env: APP_ENV });\n\n      return ok({\n        success: true,\n        image_url: imageUrl,\n        request_id,\n        user_id: userId,\n        env: APP_ENV,\n        prompt: payload.prompt,\n        strength: payload.strength,\n        steps: payload.num_inference_steps,\n        guidance: payload.guidance_scale,\n        seed: payload.seed,\n      });\n\n    } catch (fetchError) {\n      clearTimeout(timeoutId);\n      \n      if (fetchError.name === 'AbortError') {\n        console.error('[aimlApi] Request timeout after 30s');\n        return bad(504, 'Request timeout - AIML API took too long to respond');\n      }\n\n      console.error('[aimlApi] Fetch error:', fetchError);\n      return bad(502, `Network error calling AIML API: ${fetchError.message}`);\n    }\n\n  } catch (error) {\n    console.error('[aimlApi] Unexpected error:', error);\n    return bad(500, 'Internal server error');\n  }\n};\n\n\n"],
  "mappings": "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",
  "names": []
}
