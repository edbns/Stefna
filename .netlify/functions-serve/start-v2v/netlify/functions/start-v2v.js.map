{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/start-v2v.ts", "../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/models.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-5584-4Es44Vzy44x4",
  "sourcesContent": ["// netlify/functions/start-v2v.ts - Bullet-proof V2V with explicit model selection\nimport type { Handler } from '@netlify/functions';\nimport { MODELS, detectIsVideo } from './models';\n\nconst AIML_API_URL = process.env.AIML_API_URL!;\nconst AIML_API_KEY = process.env.AIML_API_KEY!;\n\nfunction safeParse(text: string) {\n  try {\n    return JSON.parse(text);\n  } catch {\n    return { raw: text };\n  }\n}\n\nfunction normalizeCloudinaryUrl(url: string): string {\n  if (!url?.includes('res.cloudinary.com')) return url;\n  \n  // Force vendor-friendly MP4/H.264 URL when it's a Cloudinary MOV/HEVC\n  return url\n    .replace('/upload/', '/upload/f_mp4,vc_h264,q_auto/')\n    .replace(/\\.mov(\\?|$)/i, '.mp4$1');\n}\n\nexport const handler: Handler = async (event) => {\n  try {\n    const body = JSON.parse(event.body || '{}');\n\n    // Always set the model explicitly (don't rely on vendor defaults)\n    const sourceUrl = body.video_url || body.image_url || body.source_url || body.url;\n    \n    if (!sourceUrl) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'No source URL provided',\n          expected: 'video_url, image_url, source_url, or url',\n          received: Object.keys(body)\n        })\n      };\n    }\n\n    // Explicit video detection - don't infer from other fields\n    const isVideo = detectIsVideo(sourceUrl) || body.isVideo === true;\n    const model = isVideo ? MODELS.V2V : MODELS.I2V;\n\n    console.log(`[start-v2v] Explicit model selection:`, {\n      sourceUrl: sourceUrl.substring(0, 60) + '...',\n      isVideo,\n      model,\n      detection: 'explicit'\n    });\n\n    // Force vendor-compatible URL\n    const normalizedUrl = normalizeCloudinaryUrl(sourceUrl);\n\n    // Build CLEAN payload: only send keys the vendor expects\n    const base = {\n      model,                                    // <- REQUIRED so we don't fall back to I2V\n      prompt: body.prompt || 'Enhance this content',\n      fps: Math.min(60, Math.max(1, body.fps || 24)),\n      duration: Math.min(10, Math.max(1, body.duration || 5)), // Kling supports 5 or 10\n      stabilization: !!body.stabilization,\n    };\n\n    // Use correct URL key for the model type\n    const payload = isVideo\n      ? { ...base, video_url: normalizedUrl }  // V2V: use video_url\n      : { ...base, image_url: normalizedUrl }; // I2V: use image_url\n\n    console.log(`[start-v2v] Clean payload:`, {\n      model: payload.model,\n      keys: Object.keys(payload),\n      urlKey: isVideo ? 'video_url' : 'image_url',\n      isVideo\n    });\n\n    // DO NOT send internal fields (resource_type, visibility, source, etc.)\n    const res = await fetch(`${AIML_API_URL}/v2/generate/video/kling/generation`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${AIML_API_KEY}`,\n      },\n      body: JSON.stringify(payload),\n    });\n\n    const text = await res.text();\n    \n    if (!res.ok) {\n      console.error(`[start-v2v] Vendor rejected (${res.status}):`, text);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'Vendor rejected start',\n          status: res.status,\n          details: safeParse(text),\n          sent: { \n            model, \n            keys: Object.keys(payload), \n            isVideo,\n            urlKey: isVideo ? 'video_url' : 'image_url'\n          },\n        }),\n      };\n    }\n\n    const data = safeParse(text);\n    const job_id = data.generation_id || data.id || data.request_id || data.task_id;\n    \n    if (!job_id) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'No job ID in vendor response',\n          vendor_response: data,\n          model\n        })\n      };\n    }\n\n    console.log(`[start-v2v] Success:`, { job_id, model, isVideo });\n\n    // Return model separately; don't bake it into the ID\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ \n        ok: true,\n        job_id, \n        model,\n        vendor: `kling-v1.6-${isVideo ? 'v2v' : 'i2v'}`,\n        debug: { isVideo, model_used: model }\n      })\n    };\n\n  } catch (err: any) {\n    console.error('[start-v2v] Exception:', err);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: 'start-v2v crashed',\n        details: err?.message || String(err),\n        stack: err?.stack?.split('\\n').slice(0, 3)\n      })\n    };\n  }\n};", "// models.ts - I2V-only models (Kling v1.6 supports image-to-video only)\nexport const MODELS = {\n  I2V_STD: 'kling-video/v1.6/standard/image-to-video',\n  I2V_PRO: 'kling-video/v1.6/pro/image-to-video',\n};\n\nexport function detectIsVideo(url?: string): boolean {\n  return !!url && /\\.(mp4|mov|m4v|webm)(\\?|$)/i.test(url);\n}\n\nexport function isVideoAsset(asset: any): boolean {\n  return asset?.resource_type === 'video'\n      || /\\.(mp4|mov|webm|m4v)(\\?|$)/i.test(asset?.secure_url || asset?.url || '');\n}\n\n// Convert Cloudinary video URL to a frame image URL\nexport function toCloudinaryFrame(url: string, second = 0, width = 1024): string {\n  if (!url?.includes('res.cloudinary.com')) return url;\n  \n  // Turn a Cloudinary video into a JPG frame URL\n  return url\n    .replace('/video/upload/', `/video/upload/so_${second},w_${width},f_jpg,q_auto/`)\n    .replace(/\\.(mp4|mov|m4v|webm)(\\?|$)/i, '.jpg$2');\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCO,IAAM,SAAS;AAAA,EACpB,SAAS;AAAA,EACT,SAAS;AACX;AAEO,SAAS,cAAc,KAAuB;AACnD,SAAO,CAAC,CAAC,OAAO,8BAA8B,KAAK,GAAG;AACxD;;;ADJA,IAAM,eAAe,QAAQ,IAAI;AACjC,IAAM,eAAe,QAAQ,IAAI;AAEjC,SAAS,UAAU,MAAc;AAC/B,MAAI;AACF,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB,QAAQ;AACN,WAAO,EAAE,KAAK,KAAK;AAAA,EACrB;AACF;AAEA,SAAS,uBAAuB,KAAqB;AACnD,MAAI,CAAC,KAAK,SAAS,oBAAoB,EAAG,QAAO;AAGjD,SAAO,IACJ,QAAQ,YAAY,+BAA+B,EACnD,QAAQ,gBAAgB,QAAQ;AACrC;AAEO,IAAM,UAAmB,OAAO,UAAU;AAC/C,MAAI;AACF,UAAM,OAAO,KAAK,MAAM,MAAM,QAAQ,IAAI;AAG1C,UAAM,YAAY,KAAK,aAAa,KAAK,aAAa,KAAK,cAAc,KAAK;AAE9E,QAAI,CAAC,WAAW;AACd,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,UACP,UAAU;AAAA,UACV,UAAU,OAAO,KAAK,IAAI;AAAA,QAC5B,CAAC;AAAA,MACH;AAAA,IACF;AAGA,UAAM,UAAU,cAAc,SAAS,KAAK,KAAK,YAAY;AAC7D,UAAM,QAAQ,UAAU,OAAO,MAAM,OAAO;AAE5C,YAAQ,IAAI,yCAAyC;AAAA,MACnD,WAAW,UAAU,UAAU,GAAG,EAAE,IAAI;AAAA,MACxC;AAAA,MACA;AAAA,MACA,WAAW;AAAA,IACb,CAAC;AAGD,UAAM,gBAAgB,uBAAuB,SAAS;AAGtD,UAAM,OAAO;AAAA,MACX;AAAA;AAAA,MACA,QAAQ,KAAK,UAAU;AAAA,MACvB,KAAK,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,KAAK,OAAO,EAAE,CAAC;AAAA,MAC7C,UAAU,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,KAAK,YAAY,CAAC,CAAC;AAAA;AAAA,MACtD,eAAe,CAAC,CAAC,KAAK;AAAA,IACxB;AAGA,UAAM,UAAU,UACZ,EAAE,GAAG,MAAM,WAAW,cAAc,IACpC,EAAE,GAAG,MAAM,WAAW,cAAc;AAExC,YAAQ,IAAI,8BAA8B;AAAA,MACxC,OAAO,QAAQ;AAAA,MACf,MAAM,OAAO,KAAK,OAAO;AAAA,MACzB,QAAQ,UAAU,cAAc;AAAA,MAChC;AAAA,IACF,CAAC;AAGD,UAAM,MAAM,MAAM,MAAM,GAAG,YAAY,uCAAuC;AAAA,MAC5E,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,YAAY;AAAA,MACvC;AAAA,MACA,MAAM,KAAK,UAAU,OAAO;AAAA,IAC9B,CAAC;AAED,UAAM,OAAO,MAAM,IAAI,KAAK;AAE5B,QAAI,CAAC,IAAI,IAAI;AACX,cAAQ,MAAM,gCAAgC,IAAI,MAAM,MAAM,IAAI;AAClE,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,UACP,QAAQ,IAAI;AAAA,UACZ,SAAS,UAAU,IAAI;AAAA,UACvB,MAAM;AAAA,YACJ;AAAA,YACA,MAAM,OAAO,KAAK,OAAO;AAAA,YACzB;AAAA,YACA,QAAQ,UAAU,cAAc;AAAA,UAClC;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,OAAO,UAAU,IAAI;AAC3B,UAAM,SAAS,KAAK,iBAAiB,KAAK,MAAM,KAAK,cAAc,KAAK;AAExE,QAAI,CAAC,QAAQ;AACX,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU;AAAA,UACnB,OAAO;AAAA,UACP,iBAAiB;AAAA,UACjB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,YAAQ,IAAI,wBAAwB,EAAE,QAAQ,OAAO,QAAQ,CAAC;AAG9D,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,IAAI;AAAA,QACJ;AAAA,QACA;AAAA,QACA,QAAQ,cAAc,UAAU,QAAQ,KAAK;AAAA,QAC7C,OAAO,EAAE,SAAS,YAAY,MAAM;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,EAEF,SAAS,KAAU;AACjB,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO;AAAA,QACP,SAAS,KAAK,WAAW,OAAO,GAAG;AAAA,QACnC,OAAO,KAAK,OAAO,MAAM,IAAI,EAAE,MAAM,GAAG,CAAC;AAAA,MAC3C,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
