{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/notify-remix.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-P4QK94y1dRjZ",
  "sourcesContent": ["// Netlify Function: Anonymous Remix Notifications\n// Sends private notifications when media is remixed\n\nimport { Handler } from '@netlify/functions';\nimport { supabaseAdminAdmin } from '../lib/supabaseAdminAdmin';\n\ninterface NotifyRemixPayload {\n  parentId: string;\n  childId: string;\n  createdAt: string;\n}\n\ninterface Notification {\n  id: string;\n  user_id: string;\n  kind: 'remix';\n  media_id: string;\n  created_at: string;\n  read: boolean;\n  metadata?: {\n    child_id?: string;\n    count?: number;\n  };\n}\n\nexport const handler: Handler = async (event) => {\n  try {\n    if (event.httpMethod !== 'POST') {\n      return {\n        statusCode: 405,\n        body: JSON.stringify({ error: 'Method not allowed' })\n      };\n    }\n\n    const { parentId, childId, createdAt }: NotifyRemixPayload = JSON.parse(event.body || '{}');\n\n    if (!parentId || !childId) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({ error: 'parentId and childId are required' })\n      };\n    }\n\n    // 1. Get the parent media to find the owner\n    const { data: parentMedia, error: parentError } = await supabaseAdmin\n      .from('media_assets')\n      .select('user_id, remix_count')\n      .eq('id', parentId)\n      .single();\n\n    if (parentError || !parentMedia) {\n      console.error('Failed to find parent media:', parentError);\n      return {\n        statusCode: 404,\n        body: JSON.stringify({ error: 'Parent media not found' })\n      };\n    }\n\n    // 2. Increment remix count (this should also be handled by the database trigger)\n    const { error: updateError } = await supabaseAdmin\n      .from('media_assets')\n      .update({ remix_count: (parentMedia.remix_count || 0) + 1 })\n      .eq('id', parentId);\n\n    if (updateError) {\n      console.warn('Failed to update remix count:', updateError);\n    }\n\n    // 3. Check if there's already a recent remix notification for this user today\n    const today = new Date().toISOString().split('T')[0];\n    const { data: existingNotifications } = await supabaseAdmin\n      .from('notifications')\n      .select('id, metadata')\n      .eq('user_id', parentMedia.user_id)\n      .eq('kind', 'remix')\n      .gte('created_at', `${today}T00:00:00.000Z`)\n      .lt('created_at', `${today}T23:59:59.999Z`);\n\n    // 4. If there's already a notification today, update the count instead of creating a new one\n    if (existingNotifications && existingNotifications.length > 0) {\n      const existingNotification = existingNotifications[0];\n      const currentCount = existingNotification.metadata?.count || 1;\n      \n      const { error: updateNotificationError } = await supabaseAdmin\n        .from('notifications')\n        .update({\n          metadata: {\n            ...existingNotification.metadata,\n            count: currentCount + 1,\n            latest_child_id: childId\n          },\n          created_at: createdAt // Update timestamp to latest remix\n        })\n        .eq('id', existingNotification.id);\n\n      if (updateNotificationError) {\n        console.error('Failed to update notification:', updateNotificationError);\n      } else {\n        console.log(`Updated remix notification count to ${currentCount + 1} for user ${parentMedia.user_id}`);\n      }\n    } else {\n      // 5. Create a new notification\n      const notification: Omit<Notification, 'id'> = {\n        user_id: parentMedia.user_id,\n        kind: 'remix',\n        media_id: childId, // Point to the new remix\n        created_at: createdAt,\n        read: false,\n        metadata: {\n          child_id: childId,\n          count: 1\n        }\n      };\n\n      const { error: insertError } = await supabaseAdmin\n        .from('notifications')\n        .insert([notification]);\n\n      if (insertError) {\n        console.error('Failed to create notification:', insertError);\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ error: 'Failed to create notification' })\n        };\n      }\n\n      console.log(`Created remix notification for user ${parentMedia.user_id}`);\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ \n        success: true, \n        message: 'Remix notification sent',\n        parentUserId: parentMedia.user_id\n      })\n    };\n\n  } catch (error) {\n    console.error('Remix notification error:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Internal server error' })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
