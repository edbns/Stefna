{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/poll-v2v.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-zIMa9cXgjexR",
  "sourcesContent": ["// netlify/functions/poll-v2v.ts - Clean polling with separate id and model params\nimport type { Handler } from '@netlify/functions';\n\nconst AIML_API_URL = process.env.AIML_API_URL!;\nconst AIML_API_KEY = process.env.AIML_API_KEY!;\n\nfunction safeParse(text: string) {\n  try {\n    return JSON.parse(text);\n  } catch {\n    return { raw: text };\n  }\n}\n\nexport const handler: Handler = async (event) => {\n  try {\n    const qs = event.queryStringParameters || {};\n    const { id, model, persist, prompt } = qs;\n\n    if (!id || !model) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'Missing id or model',\n          expected: '?id=<jobId>&model=<model>&persist=true',\n          received: { id: !!id, model: !!model, keys: Object.keys(qs) }\n        })\n      };\n    }\n\n    console.log(`[poll-v2v] Polling:`, { \n      job_id: id, \n      model: model.substring(0, 40) + '...', \n      persist: persist === 'true' \n    });\n\n    // Poll the vendor with the exact model used\n    const url = `${AIML_API_URL}/v2/generate/video/kling/generation?generation_id=${encodeURIComponent(id)}`;\n    \n    const res = await fetch(url, {\n      headers: { \n        Authorization: `Bearer ${AIML_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n    });\n\n    const text = await res.text();\n    \n    if (!res.ok) {\n      console.error(`[poll-v2v] Vendor poll failed (${res.status}):`, text);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'Vendor poll failed',\n          status: res.status,\n          details: safeParse(text),\n          job_id: id,\n          model\n        })\n      };\n    }\n\n    const data = safeParse(text);\n\n    // Normalize status fields\n    const status = String(\n      data.status || data.state || (data.video_url || data.content?.url ? 'completed' : '')\n    ).toLowerCase();\n\n    console.log(`[poll-v2v] Status: ${status} for job ${id}`);\n\n    if (status === 'failed' || status === 'error') {\n      const error = data.error || data.message || text || 'Unknown error';\n      return {\n        statusCode: 200,\n        body: JSON.stringify({ \n          ok: false, \n          status: 'failed', \n          job_id: id, \n          error,\n          model \n        }),\n      };\n    }\n\n    if (status !== 'completed') {\n      const progress = data.progress ?? data.percent ?? data.meta?.progress;\n      return {\n        statusCode: 200,\n        body: JSON.stringify({ \n          ok: true, \n          status: 'processing', \n          job_id: id, \n          progress,\n          model \n        }),\n      };\n    }\n\n    // Completed: extract result URL\n    const resultUrl = data.video_url || data.content?.url || data.url;\n    if (!resultUrl) {\n      return {\n        statusCode: 200,\n        body: JSON.stringify({ \n          ok: false, \n          status: 'failed', \n          job_id: id, \n          error: 'No resultUrl in vendor response',\n          model,\n          vendor_response: data\n        }),\n      };\n    }\n\n    if (persist !== 'true') {\n      return {\n        statusCode: 200,\n        body: JSON.stringify({\n          ok: true,\n          status: 'completed',\n          job_id: id,\n          data: { mediaType: 'video', resultUrl, publicId: null },\n          model\n        }),\n      };\n    }\n\n    // Persist to Cloudinary as VIDEO\n    const uploadPayload = {\n      url: resultUrl,\n      resource_type: 'video',\n      tags: ['aiml', 'kling', model.includes('video-to-video') ? 'v2v' : 'i2v', id],\n      visibility: 'public',\n      prompt: prompt || 'AI Generated Video',\n    };\n\n    console.log(`[poll-v2v] Persisting to Cloudinary:`, { \n      resultUrl: resultUrl.substring(0, 60) + '...', \n      model: model.substring(0, 40) + '...', \n      job_id: id \n    });\n\n    const uploadRes = await fetch(`${event.headers.origin}/.netlify/functions/save-media`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(uploadPayload),\n    });\n\n    if (!uploadRes.ok) {\n      const errorText = await uploadRes.text();\n      console.error(`[poll-v2v] save-media failed (${uploadRes.status}):`, errorText);\n      // Still return success with vendor URL so UI can show result\n      return {\n        statusCode: 200,\n        body: JSON.stringify({\n          ok: true,\n          status: 'completed',\n          job_id: id,\n          data: { \n            mediaType: 'video', \n            resultUrl, \n            publicId: null,\n            note: 'cloudinary-upload-failed'\n          },\n          model\n        }),\n      };\n    }\n\n    const uploadData = await uploadRes.json();\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        ok: true,\n        status: 'completed',\n        job_id: id,\n        data: { mediaType: 'video', resultUrl, publicId: uploadData.public_id },\n        model\n      }),\n    };\n\n  } catch (err: any) {\n    console.error('[poll-v2v] Exception:', err);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        ok: false,\n        status: 'failed',\n        error: 'poll-v2v crashed',\n        details: err?.message || String(err),\n        stack: err?.stack?.split('\\n').slice(0, 3)\n      }),\n    };\n  }\n};"],
  "mappings": "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",
  "names": []
}
