{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/start-gen.ts", "../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/models.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-5584-CfnbQ4h7WXm3",
  "sourcesContent": ["// netlify/functions/start-gen.ts - I2V-only generation with frame extraction\nimport type { Handler } from '@netlify/functions';\nimport { MODELS, detectIsVideo, toCloudinaryFrame } from './models';\n\nconst AIML_API_URL = process.env.AIML_API_URL!;\nconst AIML_API_KEY = process.env.AIML_API_KEY!;\n\nfunction tryJson(text: string) {\n  try {\n    return JSON.parse(text);\n  } catch {\n    return { raw: text };\n  }\n}\n\nexport const handler: Handler = async (event) => {\n  try {\n    const body = JSON.parse(event.body || '{}');\n\n    const sourceUrl = body.video_url || body.image_url || body.url || body.source_url;\n    \n    if (!sourceUrl) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'No source URL provided',\n          expected: 'video_url, image_url, url, or source_url',\n          received: Object.keys(body)\n        })\n      };\n    }\n\n    // Detect if source is a video upload\n    const isVideoUpload = detectIsVideo(sourceUrl);\n\n    // If a video came in, convert to an IMAGE frame for I2V\n    const imageUrl = isVideoUpload \n      ? toCloudinaryFrame(sourceUrl, body.frameSecond ?? 0, 1024)\n      : sourceUrl;\n\n    // Choose tier based on plan or query param (default to standard)\n    const model = (body.tier === 'pro') ? MODELS.I2V_PRO : MODELS.I2V_STD;\n\n    console.log(`[start-gen] I2V generation:`, {\n      sourceUrl: sourceUrl.substring(0, 60) + '...',\n      isVideoUpload,\n      imageUrl: imageUrl.substring(0, 60) + '...',\n      model,\n      frameSecond: body.frameSecond ?? 0\n    });\n\n    // Build clean vendor payload - always I2V with image_url\n    const payload = {\n      model,                                    // I2V model only\n      image_url: imageUrl,                      // Always image_url (even for video frames)\n      prompt: body.prompt || 'Animate this image with cinematic motion',\n      fps: Math.min(60, Math.max(1, body.fps || 24)),\n      duration: Math.min(10, Math.max(1, body.duration || 3)),\n      stabilization: !!body.stabilization,\n      // Optional: effect/style if vendor supports named effects\n      ...(body.effect ? { effect: body.effect } : {}),\n    };\n\n    console.log(`[start-gen] Clean I2V payload:`, {\n      model: payload.model,\n      keys: Object.keys(payload),\n      isVideoUpload,\n      frameExtracted: isVideoUpload\n    });\n\n    const res = await fetch(`${AIML_API_URL}/v2/generate/video/kling/generation`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${AIML_API_KEY}`,\n      },\n      body: JSON.stringify(payload),\n    });\n\n    const text = await res.text();\n    \n    if (!res.ok) {\n      console.error(`[start-gen] Vendor I2V failed (${res.status}):`, text);\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'vendor_start_failed',\n          status: res.status,\n          vendor: tryJson(text),\n          sentKeys: Object.keys(payload),\n          model,\n          wasVideoUpload: isVideoUpload\n        })\n      };\n    }\n\n    const data = tryJson(text);\n    const job_id = data.generation_id || data.id || data.request_id || data.task_id;\n    \n    if (!job_id) {\n      return {\n        statusCode: 400,\n        body: JSON.stringify({\n          error: 'No job ID in vendor response',\n          vendor_response: data,\n          model\n        })\n      };\n    }\n\n    console.log(`[start-gen] I2V Success:`, { job_id, model, isVideoUpload });\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ \n        ok: true,\n        job_id, \n        model,\n        vendor: 'kling-v1.6-i2v',\n        debug: { \n          isVideoUpload, \n          frameExtracted: isVideoUpload,\n          model_used: model \n        }\n      })\n    };\n\n  } catch (err: any) {\n    console.error('[start-gen] Exception:', err);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: 'start-gen crashed',\n        details: err?.message || String(err),\n        stack: err?.stack?.split('\\n').slice(0, 3)\n      })\n    };\n  }\n};\n", "// models.ts - I2V-only models (Kling v1.6 supports image-to-video only)\nexport const MODELS = {\n  I2V_STD: 'kling-video/v1.6/standard/image-to-video',\n  I2V_PRO: 'kling-video/v1.6/pro/image-to-video',\n};\n\nexport function detectIsVideo(url?: string): boolean {\n  return !!url && /\\.(mp4|mov|m4v|webm)(\\?|$)/i.test(url);\n}\n\nexport function isVideoAsset(asset: any): boolean {\n  return asset?.resource_type === 'video'\n      || /\\.(mp4|mov|webm|m4v)(\\?|$)/i.test(asset?.secure_url || asset?.url || '');\n}\n\n// Convert Cloudinary video URL to a frame image URL\nexport function toCloudinaryFrame(url: string, second = 0, width = 1024): string {\n  if (!url?.includes('res.cloudinary.com')) return url;\n  \n  // Turn a Cloudinary video into a JPG frame URL\n  return url\n    .replace('/video/upload/', `/video/upload/so_${second},w_${width},f_jpg,q_auto/`)\n    .replace(/\\.(mp4|mov|m4v|webm)(\\?|$)/i, '.jpg$2');\n}\n"],
  "mappings": "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",
  "names": []
}
