{
  "version": 3,
  "sources": ["../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/togglePublish.ts", "../../../../../../Users/sennie/Desktop/Stefna-main/netlify/functions/_cloudinary.ts"],
  "sourceRoot": "/var/folders/3j/nmp5dkpd4tv8j0yq8f2ln8780000gn/T/tmp-42344-sv2NZjKjA2Cm",
  "sourcesContent": ["import { Handler } from '@netlify/functions';\nimport { initCloudinary } from './_cloudinary';\n\nexport const handler: Handler = async (event) => {\n  if (process.env.NO_DB_MODE !== 'true')\n    return { statusCode: 412, body: JSON.stringify({ ok:false, error:'NO_DB_MODE=false' }) };\n\n  if (event.httpMethod !== 'POST')\n    return { statusCode: 405, body: JSON.stringify({ ok:false, error:'Method not allowed' }) };\n\n  const cloudinary = initCloudinary();\n\n  try {\n    const { publicId, publish } = JSON.parse(event.body || '{}');\n    if (!publicId) return { statusCode: 400, body: JSON.stringify({ ok:false, error:'publicId required' }) };\n\n    if (publish) await cloudinary.api.add_tag('public', [publicId]);\n    else         await cloudinary.api.remove_tag('public', [publicId]);\n\n    return { statusCode: 200, body: JSON.stringify({ ok:true }) };\n  } catch (e: any) {\n    console.error('[togglePublish] error', e);\n    return { statusCode: 400, body: JSON.stringify({ ok:false, error: e?.message || 'unknown error' }) };\n  }\n};\n", "import { v2 as cloudinary } from 'cloudinary';\n\nexport function assertCloudinaryEnv() {\n\tconst missing = [\n\t\t['CLOUDINARY_CLOUD_NAME', process.env.CLOUDINARY_CLOUD_NAME],\n\t\t['CLOUDINARY_API_KEY', process.env.CLOUDINARY_API_KEY],\n\t\t['CLOUDINARY_API_SECRET', process.env.CLOUDINARY_API_SECRET],\n\t].filter(([k, v]) => !v).map(([k]) => k as string);\n\tif (missing.length) {\n\t\tconst msg = `Missing Cloudinary env: ${missing.join(', ')}`;\n\t\tconsole.error('[cloudinary] ' + msg);\n\t\tconst err: any = new Error(msg);\n\t\terr.code = 'ENV_MISSING';\n\t\tthrow err;\n\t}\n}\n\nexport function initCloudinary() {\n\tassertCloudinaryEnv();\n\tcloudinary.config({\n\t\tcloud_name: process.env.CLOUDINARY_CLOUD_NAME!,\n\t\tapi_key: process.env.CLOUDINARY_API_KEY!,\n\t\tapi_secret: process.env.CLOUDINARY_API_SECRET!,\n\t\tsecure: true,\n\t});\n\treturn cloudinary;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,wBAAiC;AAE1B,SAAS,sBAAsB;AACrC,QAAM,UAAU;AAAA,IACf,CAAC,yBAAyB,QAAQ,IAAI,qBAAqB;AAAA,IAC3D,CAAC,sBAAsB,QAAQ,IAAI,kBAAkB;AAAA,IACrD,CAAC,yBAAyB,QAAQ,IAAI,qBAAqB;AAAA,EAC5D,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAW;AACjD,MAAI,QAAQ,QAAQ;AACnB,UAAM,MAAM,2BAA2B,QAAQ,KAAK,IAAI,CAAC;AACzD,YAAQ,MAAM,kBAAkB,GAAG;AACnC,UAAM,MAAW,IAAI,MAAM,GAAG;AAC9B,QAAI,OAAO;AACX,UAAM;AAAA,EACP;AACD;AAEO,SAAS,iBAAiB;AAChC,sBAAoB;AACpB,oBAAAA,GAAW,OAAO;AAAA,IACjB,YAAY,QAAQ,IAAI;AAAA,IACxB,SAAS,QAAQ,IAAI;AAAA,IACrB,YAAY,QAAQ,IAAI;AAAA,IACxB,QAAQ;AAAA,EACT,CAAC;AACD,SAAO,kBAAAA;AACR;;;ADvBO,IAAM,UAAmB,OAAO,UAAU;AAC/C,MAAI,QAAQ,IAAI,eAAe;AAC7B,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,OAAO,OAAM,mBAAmB,CAAC,EAAE;AAEzF,MAAI,MAAM,eAAe;AACvB,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,OAAO,OAAM,qBAAqB,CAAC,EAAE;AAE3F,QAAMC,cAAa,eAAe;AAElC,MAAI;AACF,UAAM,EAAE,UAAU,QAAQ,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AAC3D,QAAI,CAAC,SAAU,QAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,OAAO,OAAM,oBAAoB,CAAC,EAAE;AAEvG,QAAI,QAAS,OAAMA,YAAW,IAAI,QAAQ,UAAU,CAAC,QAAQ,CAAC;AAAA,QACjD,OAAMA,YAAW,IAAI,WAAW,UAAU,CAAC,QAAQ,CAAC;AAEjE,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,KAAK,CAAC,EAAE;AAAA,EAC9D,SAAS,GAAQ;AACf,YAAQ,MAAM,yBAAyB,CAAC;AACxC,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,IAAG,OAAO,OAAO,GAAG,WAAW,gBAAgB,CAAC,EAAE;AAAA,EACrG;AACF;",
  "names": ["cloudinary", "cloudinary"]
}
