generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

model Extensions {
  id      String  @id @default(cuid())
  name    String  @unique
  enabled Boolean @default(true)

  @@map("_extensions")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  externalId         String              @unique @map("external_id")
  name               String?
  avatarUrl          String?             @map("avatar_url")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  aiGenerations      AiGeneration[]
  creditTransactions CreditTransaction[]
  media              MediaAsset[]
  mediaAssetsGlitch  MediaAssetsGlitch[]
  neoGlitchMedia     NeoGlitchMedia[]
  notifications      Notification[]
  credits            UserCredits?
  settings           UserSettings?
  videoJobs          VideoJob[]

  @@map("users")
}

model UserSettings {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  shareToFeed Boolean  @default(true) @map("share_to_feed")
  allowRemix  Boolean  @default(true) @map("allow_remix")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model MediaAsset {
  id             String   @id @default(cuid())
  ownerId        String   @map("owner_id")
  url            String
  publicId       String?  @unique @map("public_id")
  resourceType   String   @map("resource_type")
  folder         String?
  bytes          Int?
  width          Int?
  height         Int?
  duration       Int?
  prompt         String?
  negativePrompt String?  @map("negative_prompt")
  model          String?
  mode           String?
  visibility     String   @default("private")
  allowRemix     Boolean  @default(false) @map("allow_remix")
  env            String   @default("production")
  meta           Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  owner          User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([visibility, createdAt(sort: Desc)])
  @@index([ownerId, createdAt(sort: Desc)])
  @@index([publicId])
  @@map("media_assets")
}

model UserCredits {
  userId    String   @id @map("user_id")
  balance   Int      @default(0)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_credits")
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  amount    Int
  reason    String
  env       String   @default("production")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, env, createdAt(sort: Desc)])
  @@map("credits_ledger")
}

model AppConfig {
  key   String @id
  value Json

  @@map("app_config")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@map("notifications")
}

model ReferralSignup {
  id             String   @id @default(cuid())
  referrerUserId String   @map("referrer_user_id")
  newUserId      String   @unique @map("new_user_id")
  referrerEmail  String?  @map("referrer_email")
  newUserEmail   String?  @map("new_user_email")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("referral_signups")
}

model NeoGlitchMedia {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  imageUrl       String   @map("image_url")
  sourceUrl      String   @map("source_url")
  prompt         String
  preset         String
  runId          String   @unique @map("run_id")
  createdAt      DateTime @default(now()) @map("created_at")
  status         String   @default("completed")
  stabilityJobId String?  @map("stability_job_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([preset])
  @@index([stabilityJobId])
  @@map("neo_glitch_media")
}

model VideoJob {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  sourceUrl  String   @map("source_url")
  prompt     String
  model      String
  params     Json?
  shotlist   Json?
  fps        Int?
  width      Int?
  height     Int?
  allowRemix Boolean  @default(false) @map("allow_remix")
  visibility String   @default("private")
  type       String   @default("story")
  status     String   @default("queued")
  progress   Int      @default(0)
  resultUrl  String?  @map("result_url")
  error      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([type])
  @@map("video_jobs")
}

model AiGeneration {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  inputUrl   String   @map("input_url")
  preset     String
  visibility String   @default("private")
  status     String   @default("queued")
  progress   Int      @default(0)
  resultUrl  String?  @map("result_url")
  error      String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@map("ai_generations")
}

model MediaAssetsGlitch {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  runId         String   @unique @map("run_id")
  presetKey     String   @map("preset_key")
  prompt        String
  sourceAssetId String?  @map("source_asset_id")
  status        String   @default("pending")
  meta          Json?
  inputHash     String   @map("input_hash")
  cloudinaryUrl String?  @map("cloudinary_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([inputHash])
  @@map("media_assets_glitch")
}

model AuthOtp {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String
  code      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  used      Boolean? @default(false)

  @@map("auth_otps")
}
