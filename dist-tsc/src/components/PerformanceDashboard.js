import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from '../utils/motionShim';
import { Activity, Zap, AlertTriangle, TrendingUp, TrendingDown, Minus } from 'lucide-react';
import performanceService from '../services/performanceService';
const PerformanceDashboard = ({ isOpen, onClose }) => {
    const [performanceData, setPerformanceData] = useState(performanceService.getPerformanceData());
    const [activeTab, setActiveTab] = useState('overview');
    useEffect(() => {
        if (isOpen) {
            const interval = setInterval(() => {
                setPerformanceData(performanceService.getPerformanceData());
            }, 5000); // Update every 5 seconds
            return () => clearInterval(interval);
        }
    }, [isOpen]);
    const getTrendIcon = (trend) => {
        switch (trend) {
            case 'improving':
                return _jsx(TrendingDown, { className: "text-green-500", size: 16 });
            case 'degrading':
                return _jsx(TrendingUp, { className: "text-red-500", size: 16 });
            default:
                return _jsx(Minus, { className: "text-gray-500", size: 16 });
        }
    };
    const formatDuration = (ms) => {
        if (ms < 1000)
            return `${Math.round(ms)}ms`;
        return `${(ms / 1000).toFixed(1)}s`;
    };
    const formatMemory = (mb) => {
        return `${mb.toFixed(1)}MB`;
    };
    const tabs = [
        { id: 'overview', label: 'Overview', icon: Activity },
        { id: 'metrics', label: 'Metrics', icon: Zap },
        { id: 'errors', label: 'Errors', icon: AlertTriangle },
        { id: 'events', label: 'Events', icon: TrendingUp }
    ];
    return (_jsx(AnimatePresence, { children: isOpen && (_jsxs(_Fragment, { children: [_jsx(motion.div, { initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, className: "fixed inset-0 bg-black/50 backdrop-blur-sm z-50", onClick: onClose }), _jsxs(motion.div, { initial: { opacity: 0, scale: 0.9, y: 20 }, animate: { opacity: 1, scale: 1, y: 0 }, exit: { opacity: 0, scale: 0.9, y: 20 }, className: "fixed inset-4 bg-white rounded-2xl shadow-2xl z-50 overflow-hidden", children: [_jsxs("div", { className: "flex items-center justify-between p-6 border-b border-gray-200", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(Activity, { size: 24, className: "text-black" }), _jsx("h2", { className: "text-xl font-bold text-black", children: "Performance Dashboard" })] }), _jsx(motion.button, { whileHover: { scale: 1.1 }, whileTap: { scale: 0.9 }, onClick: onClose, className: "w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center", children: "\u00D7" })] }), _jsxs("div", { className: "p-6 space-y-6 max-h-[70vh] overflow-y-auto", children: [_jsx("div", { className: "flex space-x-1 bg-gray-100 rounded-xl p-1", children: tabs.map((tab) => {
                                        const Icon = tab.icon;
                                        const isActive = activeTab === tab.id;
                                        return (_jsxs(motion.button, { whileHover: { scale: 1.02 }, whileTap: { scale: 0.98 }, onClick: () => setActiveTab(tab.id), className: `flex-1 flex items-center justify-center space-x-2 py-3 px-4 rounded-lg text-sm font-medium transition-all ${isActive
                                                ? 'bg-white text-black shadow-sm'
                                                : 'text-gray-600 hover:text-gray-800'}`, children: [_jsx(Icon, { size: 16 }), _jsx("span", { children: tab.label })] }, tab.id));
                                    }) }), _jsxs(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.3 }, className: "space-y-4", children: [activeTab === 'overview' && (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "bg-gray-50 rounded-xl p-4", children: [_jsx("div", { className: "text-2xl font-bold text-black", children: formatDuration(performanceService.getSessionDuration()) }), _jsx("div", { className: "text-xs text-gray-500", children: "Session Duration" })] }), _jsxs("div", { className: "bg-gray-50 rounded-xl p-4", children: [_jsx("div", { className: "text-2xl font-bold text-black", children: performanceData.events.length }), _jsx("div", { className: "text-xs text-gray-500", children: "Events Tracked" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsx("h3", { className: "text-lg font-semibold text-black", children: "Key Metrics" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between p-3 bg-gray-50 rounded-xl", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-black", children: "Page Load Time" }), _jsx("div", { className: "text-sm text-gray-500", children: formatDuration(performanceService.getAverageMetric('page_load_time')) })] }), _jsx("div", { className: "flex items-center space-x-2", children: getTrendIcon(performanceService.getMetricTrend('page_load_time')) })] }), _jsxs("div", { className: "flex items-center justify-between p-3 bg-gray-50 rounded-xl", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-black", children: "Memory Usage" }), _jsx("div", { className: "text-sm text-gray-500", children: formatMemory(performanceService.getAverageMetric('memory_used')) })] }), _jsx("div", { className: "flex items-center space-x-2", children: getTrendIcon(performanceService.getMetricTrend('memory_used')) })] }), _jsxs("div", { className: "flex items-center justify-between p-3 bg-gray-50 rounded-xl", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-black", children: "Error Rate" }), _jsxs("div", { className: "text-sm text-gray-500", children: [performanceService.getErrorRate().toFixed(2), " errors/min"] })] }), _jsx("div", { className: "flex items-center space-x-2", children: _jsx(AlertTriangle, { size: 16, className: "text-red-500" }) })] })] })] })] })), activeTab === 'metrics' && (_jsxs("div", { className: "space-y-4", children: [_jsx("h3", { className: "text-lg font-semibold text-black", children: "Performance Metrics" }), _jsx("div", { className: "space-y-3", children: performanceData.metrics.slice(-10).reverse().map((metric, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, transition: { delay: index * 0.1 }, className: "flex items-center justify-between p-3 bg-gray-50 rounded-xl", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium text-black", children: metric.name }), _jsxs("div", { className: "text-sm text-gray-500", children: [metric.value, metric.unit, " \u2022 ", new Date(metric.timestamp).toLocaleTimeString()] })] }), _jsx("div", { className: `px-2 py-1 rounded-full text-xs font-medium ${metric.category === 'load' ? 'bg-blue-100 text-blue-700' :
                                                                    metric.category === 'render' ? 'bg-green-100 text-green-700' :
                                                                        metric.category === 'interaction' ? 'bg-purple-100 text-purple-700' :
                                                                            'bg-red-100 text-red-700'}`, children: metric.category })] }, index))) })] })), activeTab === 'errors' && (_jsxs("div", { className: "space-y-4", children: [_jsx("h3", { className: "text-lg font-semibold text-black", children: "Error Reports" }), _jsx("div", { className: "space-y-3", children: performanceData.errors.length === 0 ? (_jsxs("div", { className: "text-center py-8", children: [_jsx(AlertTriangle, { size: 48, className: "text-gray-300 mx-auto mb-4" }), _jsx("h3", { className: "text-lg font-medium text-black mb-2", children: "No errors reported" }), _jsx("p", { className: "text-sm text-gray-500", children: "Great! Your app is running smoothly." })] })) : (performanceData.errors.slice(-10).reverse().map((error, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, transition: { delay: index * 0.1 }, className: "p-4 bg-red-50 rounded-xl border border-red-200", children: [_jsxs("div", { className: "flex items-start justify-between mb-2", children: [_jsx("div", { className: "font-medium text-red-800", children: error.message }), _jsx("div", { className: "text-xs text-red-600", children: new Date(error.timestamp).toLocaleTimeString() })] }), error.component && (_jsxs("div", { className: "text-sm text-red-600 mb-2", children: ["Component: ", error.component] })), error.stack && (_jsxs("details", { className: "text-xs text-red-600", children: [_jsx("summary", { className: "cursor-pointer", children: "Stack Trace" }), _jsx("pre", { className: "mt-2 whitespace-pre-wrap", children: error.stack })] }))] }, index)))) })] })), activeTab === 'events' && (_jsxs("div", { className: "space-y-4", children: [_jsx("h3", { className: "text-lg font-semibold text-black", children: "User Events" }), _jsx("div", { className: "space-y-3", children: performanceData.events.slice(-10).reverse().map((event, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, transition: { delay: index * 0.1 }, className: "p-3 bg-gray-50 rounded-xl", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("div", { className: "font-medium text-black", children: event.event }), _jsx("div", { className: "text-xs text-gray-500", children: new Date(event.timestamp).toLocaleTimeString() })] }), Object.keys(event.properties).length > 0 && (_jsxs("details", { className: "text-sm text-gray-600", children: [_jsx("summary", { className: "cursor-pointer", children: "Properties" }), _jsx("pre", { className: "mt-2 text-xs bg-gray-100 p-2 rounded", children: JSON.stringify(event.properties, null, 2) })] }))] }, index))) })] }))] }, activeTab), _jsxs("div", { className: "flex space-x-3 pt-4 border-t border-gray-200", children: [_jsx(motion.button, { whileHover: { scale: 1.02 }, whileTap: { scale: 0.98 }, onClick: () => performanceService.sendToAnalytics(), className: "flex-1 bg-black text-white font-medium py-3 px-6 rounded-xl", children: "Send to Analytics" }), _jsx(motion.button, { whileHover: { scale: 1.02 }, whileTap: { scale: 0.98 }, onClick: () => console.log(performanceService.getPerformanceData()), className: "flex-1 bg-gray-100 text-black font-medium py-3 px-6 rounded-xl", children: "Export Data" })] })] })] })] })) }));
};
export default PerformanceDashboard;
