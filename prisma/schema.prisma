// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

// Enable required extensions
model Extensions {
  id String @id @default(cuid())
  name String @unique
  enabled Boolean @default(true)
  @@map("_extensions")
}

// Users table - bulletproof ownership
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  externalId String   @unique @map("external_id") // Netlify Identity sub (string)
  name       String?
  avatarUrl  String?  @map("avatar_url")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  media      MediaAsset[]
  settings   UserSettings?
  credits    UserCredits?
  creditTransactions CreditTransaction[]
  notifications Notification[]

  @@map("users")
}

// User settings - separate table for flexibility
model UserSettings {
  id           String @id @default(cuid())
  userId       String @unique @map("user_id")
  shareToFeed  Boolean @default(true) @map("share_to_feed")
  allowRemix   Boolean @default(true) @map("allow_remix")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Consolidated Media Assets table - replaces old media_assets and assets
model MediaAsset {
  id           String   @id @default(cuid())
  userId       String   @map("user_id") // Always required, no nullable owner_id bugs
  
  // URL fields - consolidated for both Cloudinary and Replicate
  url          String?  // Legacy field for backward compatibility
  finalUrl     String?  @map("final_url") // Primary field for generated media URLs
  cloudinaryPublicId String? @unique @map("cloudinary_public_id") // Cloudinary public ID
  publicId     String?  @unique @map("public_id") // Alternative field name
  
  // Media properties
  resourceType String?  @map("resource_type") // image, video, raw
  mediaType    String?  @map("media_type") // Alternative field name
  folder       String?
  bytes        Int?
  width        Int?
  height       Int?
  duration     Int?
  
  // Generation metadata
  prompt       String?
  negativePrompt String? @map("negative_prompt")
  model        String?
  mode         String?
  
  // Visibility and permissions
  visibility   String   @default("private") // private, public
  isPublic     Boolean  @default(false) @map("is_public") // Legacy field for backward compatibility
  allowRemix   Boolean  @default(false) @map("allow_remix")
  
  // Status tracking
  status       String   @default("ready") // ready, processing, failed
  
  // Preset and source tracking
  presetKey    String?  @map("preset_key") // Alternative to preset_id
  presetId     String?  @map("preset_id") // Alternative to preset_key
  sourceAssetId String? @map("source_asset_id")
  
  // Environment and metadata
  env          String   @default("production")
  meta         Json?    // Flexible metadata
  
  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  owner User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([userId, createdAt(sort: Desc)])
  @@index([visibility, createdAt(sort: Desc)])
  @@index([status])
  @@index([finalUrl])
  @@index([cloudinaryPublicId])
  
  @@map("media_assets")
}

// User Credits table - current balance
model UserCredits {
  userId    String   @id @map("user_id")
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_credits")
}

// Credits Ledger table - transaction history
model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  requestId String   @unique @map("request_id") // idempotency key
  action    String   // e.g., "image.gen", "video.gen", "grant", "refund"
  amount    Int      // negative for spend, positive for grant/refund
  status    String   // reserved, committed, refunded, granted
  meta      Json?    // additional metadata
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for quota calculations
  @@index([userId, createdAt(sort: Desc)])
  @@index([userId, status, createdAt(sort: Desc)])
  
  @@map("credits_ledger")
}

// App Configuration table - global settings
model AppConfig {
  key   String @id
  value Json

  @@map("app_config")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // e.g., "generation_complete", "generation_started"
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, read, createdAt(sort: Desc)])
  
  @@map("notifications")
}

// Referral system tables
model ReferralSignup {
  id               String   @id @default(cuid())
  referrerUserId   String   @map("referrer_user_id")
  newUserId        String   @unique @map("new_user_id")
  referrerEmail    String?  @map("referrer_email")
  newUserEmail     String?  @map("new_user_email")
  createdAt        DateTime @default(now()) @map("created_at")

  @@map("referral_signups")
}
