generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

model Extensions {
  id      String  @id @default(cuid())
  name    String  @unique
  enabled Boolean @default(true)

  @@map("_extensions")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  externalId         String              @unique @map("external_id")
  name               String?
  avatarUrl          String?             @map("avatar_url")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  media              MediaAsset[]
  neoGlitchMedia     NeoGlitchMedia[]
  notifications      Notification[]
  credits            UserCredits?
  settings           UserSettings?

  @@map("users")
}

model UserSettings {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  shareToFeed Boolean  @default(true) @map("share_to_feed")
  allowRemix  Boolean  @default(true) @map("allow_remix")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model MediaAsset {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  url                String?
  finalUrl           String?  @map("final_url")
  cloudinaryPublicId String?  @unique @map("cloudinary_public_id")
  publicId           String?  @unique @map("public_id")
  resourceType       String?  @map("resource_type")
  mediaType          String?  @map("media_type")
  folder             String?
  bytes              Int?
  width              Int?
  height             Int?
  duration           Int?
  prompt             String?
  negativePrompt     String?  @map("negative_prompt")
  model              String?
  mode               String?
  visibility         String   @default("private")
  isPublic           Boolean  @default(false) @map("is_public")
  allowRemix         Boolean  @default(false) @map("allow_remix")
  status             String   @default("ready")
  presetKey          String?  @map("preset_key")
  presetId           String?  @map("preset_id")
  sourceAssetId      String?  @map("source_asset_id")
  env                String   @default("production")
  meta               Json?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  owner              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([visibility, createdAt(sort: Desc)])
  @@index([status])
  @@index([finalUrl])
  @@index([cloudinaryPublicId])
  @@map("media_assets")
}

model UserCredits {
  userId    String   @id @map("user_id")
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_credits")
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  requestId String   @unique @map("request_id")
  action    String
  amount    Int
  status    String
  meta      Json?
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([userId, status, createdAt(sort: Desc)])
  @@map("credits_ledger")
}

model AppConfig {
  key   String @id
  value Json

  @@map("app_config")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@map("notifications")
}

model ReferralSignup {
  id             String   @id @default(cuid())
  referrerUserId String   @map("referrer_user_id")
  newUserId      String   @unique @map("new_user_id")
  referrerEmail  String?  @map("referrer_email")
  newUserEmail   String?  @map("new_user_email")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("referral_signups")
}

model NeoGlitchMedia {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  imageUrl        String
  sourceUrl       String
  prompt          String
  preset          String
  runId           String   @unique
  stabilityJobId  String?  @map("stability_job_id")
  createdAt       DateTime @default(now()) @map("created_at")
  status          String   @default("completed")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([preset])
  @@index([stabilityJobId])
  @@map("neo_glitch_media")
}

model AuthOtp {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String
  code      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)
  used      Boolean? @default(false)

  @@map("auth_otps")
}
