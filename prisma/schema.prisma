generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Extensions {
  id      String  @id @default(cuid())
  name    String  @unique
  enabled Boolean @default(true)

  @@map("_extensions")
}

model PresetConfig {
  id          String   @id @default(cuid())
  presetKey   String   @unique @map("preset_key")
  name        String
  description String   @default("")
  strength    Float    @default(1.0)
  category    String   @default("custom")
  isEnabled   Boolean  @default(true) @map("is_enabled")
  isCustom    Boolean  @default(false) @map("is_custom")
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([category, isEnabled])
  @@index([presetKey])
  @@map("preset_config")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  avatarUrl          String?             @map("avatar_url")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  userCredits        UserCredits?
  media_assets       media_assets[]
  neoGlitchMedia     neoGlitchMedia[]
  ghibliReactionMedia ghibliReactionMedia[]
  emotionMaskMedia   emotionMaskMedia[]
  presetsMedia       presetsMedia[]
  customPromptMedia  customPromptMedia[]
  notifications      Notification[]
  stories            Story[]
  settings           UserSettings?

  @@map("users")
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")
  shareToFeed           Boolean  @default(true) @map("share_to_feed")
  allowRemix            Boolean  @default(true) @map("allow_remix")
  mediaUploadAgreed     Boolean  @default(false) @map("media_upload_agreed")
  updatedAt             DateTime @updatedAt @map("updated_at")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model UserCredits {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  credits   Int      @default(30)
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_credits")
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  amount    Int
  reason    String
  env       String   @default("production")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, env, createdAt(sort: Desc)])
  @@map("credits_ledger")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@map("notifications")
}

model neoGlitchMedia {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  imageUrl       String   @map("image_url")
  sourceUrl      String   @map("source_url")
  prompt         String
  preset         String
  runId          String   @unique @map("run_id")
  createdAt      DateTime @default(now()) @map("created_at")
  status         String   @default("completed")
  stabilityJobId String?  @map("stability_job_id")
  metadata       Json?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([preset])
  @@index([stabilityJobId])
  @@map("neo_glitch_media")
}

model media_assets {
  id              String   @id
  owner_id        String
  url             String
  public_id       String?  @unique
  resource_type   String
  folder          String?
  bytes           Int?
  width           Int?
  height          Int?
  duration        Int?
  prompt          String?
  negative_prompt String?
  model           String?
  mode            String?
  visibility      String   @default("private")
  allow_remix     Boolean  @default(false)
  env             String   @default("production")
  meta            Json?
  created_at      DateTime @default(now())
  updated_at      DateTime
  users           User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@index([owner_id, created_at(sort: Desc)])
  @@index([public_id])
  @@index([visibility, created_at(sort: Desc)])
}

model Story {
  id          String       @id @default(cuid())
  userId      String       @map("user_id")
  title       String?
  description String?
  preset      String       @default("auto")
  status      String       @default("pending")
  progress    Int          @default(0)
  storyText   String?      @map("story_text")
  metadata    Json?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      StoryPhoto[]

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([preset])
  @@map("stories")
}

model StoryPhoto {
  id        String   @id @default(cuid())
  storyId   String   @map("story_id")
  order     Int
  imageUrl  String   @map("image_url")
  videoUrl  String?  @map("video_url")
  prompt    String?
  createdAt DateTime @default(now()) @map("created_at")
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId, order])
  @@map("story_photos")
}

// Ghibli Reaction Media
model ghibliReactionMedia {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  imageUrl  String  @map("image_url")
  prompt    String
  preset    String
  status    String  @default("completed")
  createdAt DateTime @default(now()) @map("created_at")
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@map("ghibli_reaction_media")
}

// Emotion Mask Media
model emotionMaskMedia {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  imageUrl  String  @map("image_url")
  prompt    String
  preset    String
  status    String  @default("completed")
  createdAt DateTime @default(now()) @map("created_at")
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@map("emotion_mask_media")
}

// Presets Media
model presetsMedia {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  imageUrl  String  @map("image_url")
  prompt    String
  preset    String
  status    String  @default("completed")
  createdAt DateTime @default(now()) @map("created_at")
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@map("presets_media")
}

// Custom Prompt Media
model customPromptMedia {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  imageUrl  String  @map("image_url")
  prompt    String
  preset    String
  status    String  @default("completed")
  createdAt DateTime @default(now()) @map("created_at")
  metadata  Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@map("custom_prompt_media")
}

// Authentication OTP
model authOtp {
  id        String   @id @default(cuid())
  email     String
  code      String
  used      Boolean  @default(false)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email, code])
  @@index([expiresAt])
  @@map("auth_otps")
}
