generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model extensions {
  id      String  @id @default(cuid())
  name    String  @unique
  enabled Boolean @default(true)

  @@map("_extensions")
}

model AuthOtp {
  id        String   @id @default(cuid())
  email     String
  code      String
  used      Boolean  @default(false)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email, code])
  @@index([expiresAt])
  @@map("auth_otps")
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String  @map("user_id")
  amount    Int
  reason    String
  env       String  @default("production")
  createdAt DateTime @default(now()) @map("created_at")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, env, createdAt(sort: Desc)])
  @@map("credits_ledger")
}

model CustomPromptMedia {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  imageUrl   String   @map("image_url")
  prompt     String
  preset     String
  status     String   @default("completed")
  createdAt  DateTime @default(now()) @map("created_at")
  metadata   Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@map("custom_prompt_media")
}

model EmotionMaskMedia {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  imageUrl   String   @map("image_url")
  prompt     String
  preset     String
  status     String   @default("completed")
  createdAt  DateTime @map("created_at")
  metadata   Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@map("emotion_mask_media")
}

model GhibliReactionMedia {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  imageUrl   String   @map("image_url")
  prompt     String
  preset     String
  status     String   @default("completed")
  createdAt  DateTime @map("created_at")
  metadata   Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@map("ghibli_reaction_media")
}

model media_assets {
  id              String   @id @default(cuid())
  owner_id        String
  url             String
  public_id       String?  @unique
  resource_type   String
  folder          String?
  bytes           Int?
  width           Int?
  height          Int?
  duration        Int?
  prompt          String?
  negative_prompt String?
  model           String?
  mode            String?
  visibility      String   @default("private")
  allow_remix     Boolean  @default(false)
  env             String   @default("production")
  meta            Json?
  created_at      DateTime @default(now())
  updated_at      DateTime
  user            User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@index([owner_id, created_at(sort: Desc)])
  @@index([public_id])
  @@index([visibility, created_at(sort: Desc)])
}

model NeoGlitchMedia {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  imageUrl         String   @map("image_url")
  sourceUrl        String   @map("source_url")
  prompt           String
  preset           String
  runId            String   @unique @map("run_id")
  createdAt        DateTime @default(now()) @map("created_at")
  status           String   @default("completed")
  stabilityJobId   String?  @map("stability_job_id")
  metadata         Json?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([preset])
  @@index([stabilityJobId])
  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@map("neo_glitch_media")
}

model notifications {
  id         String   @id @default(cuid())
  user_id    String
  type       String
  title      String
  message    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, read, created_at(sort: Desc)])
}

model preset_config {
  id          String   @id @default(cuid())
  preset_key  String   @unique
  name        String
  description String   @default("")
  strength    Float    @default(1.0)
  category    String   @default("custom")
  is_enabled  Boolean  @default(true)
  is_custom   Boolean  @default(false)
  metadata    Json?
  created_at  DateTime @default(now())
  updated_at  DateTime

  @@index([category, is_enabled])
  @@index([preset_key])
}

model PresetsMedia {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  imageUrl   String   @map("image_url")
  prompt     String
  preset     String
  status     String   @default("completed")
  createdAt  DateTime @map("created_at")
  metadata   Json?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@map("presets_media")
}

model Story {
  id           String         @id @default(cuid())
  userId       String         @map("user_id")
  title        String?
  description  String?
  preset       String         @default("auto")
  status       String         @default("pending")
  progress     Int            @default(0)
  storyText    String?        @map("story_text")
  metadata     Json?
  createdAt    DateTime       @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyPhotos  StoryPhoto[]

  @@index([preset])
  @@index([status])
  @@index([userId, createdAt(sort: Desc)])
  @@map("stories")
}

model StoryPhoto {
  id        String   @id @default(cuid())
  storyId   String   @map("story_id")
  order     Int
  imageUrl  String   @map("image_url")
  videoUrl  String?  @map("video_url")
  prompt    String?
  createdAt DateTime @map("created_at")
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId, order])
  @@map("story_photos")
}

model UserCredits {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  credits   Int      @default(30)
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_credits")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique @map("user_id")
  shareToFeed        Boolean  @default(true) @map("share_to_feed")
  updatedAt          DateTime @updatedAt @map("updated_at")
  mediaUploadAgreed  Boolean  @default(false) @map("media_upload_agreed")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model User {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  name                  String?
  avatarUrl             String?                 @map("avatar_url")
  createdAt             DateTime                @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  creditTransactions    CreditTransaction[]
  customPromptMedia     CustomPromptMedia[]
  emotionMaskMedia      EmotionMaskMedia[]
  ghibliReactionMedia   GhibliReactionMedia[]
  mediaAssets           media_assets[]
  neoGlitchMedia        NeoGlitchMedia[]
  notifications         notifications[]
  presetsMedia          PresetsMedia[]
  stories               Story[]
  userCredits           UserCredits?
  userSettings          UserSettings?

  @@map("users")
}
