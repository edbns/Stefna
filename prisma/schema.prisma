generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Extensions {
  id      String  @id @default(cuid())
  name    String  @unique
  enabled Boolean @default(true)

  @@map("_extensions")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  external_id        String              @unique
  name               String?
  avatarUrl          String?             @map("avatar_url")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  media_assets       media_assets[]
  neoGlitchMedia     neoGlitchMedia[]
  notifications      Notification[]
  settings           UserSettings?
  stories            Story[]

  @@map("users")
}

model UserSettings {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  shareToFeed Boolean  @default(true) @map("share_to_feed")
  allowRemix  Boolean  @default(true) @map("allow_remix")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  amount    Int
  reason    String
  env       String   @default("production")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, env, createdAt(sort: Desc)])
  @@map("credits_ledger")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@map("notifications")
}

model neoGlitchMedia {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  imageUrl       String   @map("image_url")
  sourceUrl      String   @map("source_url")
  prompt         String
  preset         String
  runId          String   @unique @map("run_id")
  createdAt      DateTime @default(now()) @map("created_at")
  status         String   @default("completed")
  stabilityJobId String?  @map("stability_job_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([preset])
  @@index([stabilityJobId])
  @@map("neo_glitch_media")
}

model media_assets {
  id              String   @id
  owner_id        String
  url             String
  public_id       String?  @unique
  resource_type   String
  folder          String?
  bytes           Int?
  width           Int?
  height          Int?
  duration        Int?
  prompt          String?
  negative_prompt String?
  model           String?
  mode            String?
  visibility      String   @default("private")
  allow_remix     Boolean  @default(false)
  env             String   @default("production")
  meta            Json?
  created_at      DateTime @default(now())
  updated_at      DateTime
  users           User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@index([owner_id, created_at(sort: Desc)])
  @@index([public_id])
  @@index([visibility, created_at(sort: Desc)])
}

// Story Time - AI-powered photo story creation
model Story {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  title       String?
  description String?
  preset      String      @default("auto") // auto, adventure, romance, mystery, comedy, fantasy, travel
  status      String      @default("pending") // pending, processing, completed, failed
  progress    Int         @default(0) // 0-100
  storyText   String?     @map("story_text") // AI-generated story narrative
  metadata    Json?       // Store video generation results and other metadata
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  photos      StoryPhoto[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([preset])
  @@map("stories")
}

model StoryPhoto {
  id        String   @id @default(cuid())
  storyId   String   @map("story_id")
  order     Int      // sequence in the story (1, 2, 3...)
  imageUrl  String   @map("image_url")
  videoUrl  String?  @map("video_url") // Generated video URL from Kling V1.6
  prompt    String?  // AI-generated description for this photo
  createdAt DateTime @default(now()) @map("created_at")
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@index([storyId, order])
  @@map("story_photos")
}
