generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model extensions {
  id      String  @id
  name    String  @unique
  enabled Boolean @default(true)

  @@map("_extensions")
}

model auth_otps {
  id         String   @id
  email      String
  code       String
  used       Boolean  @default(false)
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([email, code])
  @@index([expires_at])
}

model CreditTransaction {
  id        String   @id
  userId    String  @map("user_id")
  amount    Int
  reason    String
  env       String  @default("production")
  createdAt DateTime @default(now()) @map("created_at")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, env, createdAt(sort: Desc)])
  @@map("credits_ledger")
}

model custom_prompt_media {
  id         String   @id
  user_id    String
  image_url  String
  prompt     String
  preset     String
  status     String   @default("completed")
  created_at DateTime @default(now())
  metadata   Json?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([user_id, created_at(sort: Desc)])
}

model emotion_mask_media {
  id         String   @id
  user_id    String
  image_url  String
  prompt     String
  preset     String
  status     String   @default("completed")
  created_at DateTime @default(now())
  metadata   Json?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([user_id, created_at(sort: Desc)])
}

model ghibli_reaction_media {
  id         String   @id
  user_id    String
  image_url  String
  prompt     String
  preset     String
  status     String   @default("completed")
  created_at DateTime @default(now())
  metadata   Json?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([user_id, created_at(sort: Desc)])
}

model media_assets {
  id              String   @id
  owner_id        String
  url             String
  public_id       String?  @unique
  resource_type   String
  folder          String?
  bytes           Int?
  width           Int?
  height          Int?
  duration        Int?
  prompt          String?
  negative_prompt String?
  model           String?
  mode            String?
  visibility      String   @default("private")
  allow_remix     Boolean  @default(false)
  env             String   @default("production")
  meta            Json?
  created_at      DateTime @default(now())
  updated_at      DateTime
  user            User     @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@index([owner_id, created_at(sort: Desc)])
  @@index([public_id])
  @@index([visibility, created_at(sort: Desc)])
}

model neo_glitch_media {
  id               String   @id
  user_id          String
  image_url        String
  source_url       String
  prompt           String
  preset           String
  run_id           String   @unique
  created_at       DateTime @default(now())
  status           String   @default("completed")
  stability_job_id String?
  metadata         Json?
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([preset])
  @@index([stability_job_id])
  @@index([status])
  @@index([user_id, created_at(sort: Desc)])
}

model notifications {
  id         String   @id
  user_id    String
  type       String
  title      String
  message    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, read, created_at(sort: Desc)])
}

model preset_config {
  id          String   @id
  preset_key  String   @unique
  name        String
  description String   @default("")
  strength    Float    @default(1.0)
  category    String   @default("custom")
  is_enabled  Boolean  @default(true)
  is_custom   Boolean  @default(false)
  metadata    Json?
  created_at  DateTime @default(now())
  updated_at  DateTime

  @@index([category, is_enabled])
  @@index([preset_key])
}

model presets_media {
  id         String   @id
  user_id    String
  image_url  String
  prompt     String
  preset     String
  status     String   @default("completed")
  created_at DateTime @default(now())
  metadata   Json?
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([user_id, created_at(sort: Desc)])
}

model stories {
  id           String         @id
  user_id      String
  title        String?
  description  String?
  preset       String         @default("auto")
  status       String         @default("pending")
  progress     Int            @default(0)
  story_text   String?
  metadata     Json?
  created_at   DateTime       @default(now())
  updated_at   DateTime
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  story_photos story_photos[]

  @@index([preset])
  @@index([status])
  @@index([user_id, created_at(sort: Desc)])
}

model story_photos {
  id         String   @id
  story_id   String
  order      Int
  image_url  String
  video_url  String?
  prompt     String?
  created_at DateTime @default(now())
  stories    stories  @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@index([story_id, order])
}

model UserCredits {
  id        String   @id
  userId    String   @unique @map("user_id")
  credits   Int      @default(30)
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_credits")
}

model UserSettings {
  id                 String   @id
  userId             String   @unique @map("user_id")
  shareToFeed        Boolean  @default(true) @map("share_to_feed")
  allowRemix         Boolean  @default(true) @map("allow_remix")
  updatedAt          DateTime @updatedAt @map("updated_at")
  mediaUploadAgreed  Boolean  @default(false) @map("media_upload_agreed")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model User {
  id                    String                  @id
  email                 String                  @unique
  name                  String?
  avatarUrl             String?                 @map("avatar_url")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  creditTransactions    CreditTransaction[]
  customPromptMedia     custom_prompt_media[]
  emotionMaskMedia      emotion_mask_media[]
  ghibliReactionMedia   ghibli_reaction_media[]
  mediaAssets           media_assets[]
  neoGlitchMedia        neo_glitch_media[]
  notifications         notifications[]
  presetsMedia          presets_media[]
  stories               stories[]
  userCredits           UserCredits?
  userSettings          UserSettings?

  @@map("users")
}
