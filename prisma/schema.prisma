generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Extensions {
  id      String  @id @default(cuid())
  name    String  @unique
  enabled Boolean @default(true)

  @@map("_extensions")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  avatarUrl          String?             @map("avatar_url")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  media              MediaAsset[]
  neoGlitchMedia     NeoGlitchMedia[]
  notifications      Notification[]
  settings           UserSettings?

  @@map("users")
}

model UserSettings {
  id          String   @id @default(cuid())
  userId      String   @unique @map("user_id")
  shareToFeed Boolean  @default(true) @map("share_to_feed")
  allowRemix  Boolean  @default(true) @map("allow_remix")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model MediaAsset {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  url            String
  publicId       String?  @unique @map("public_id")
  resourceType   String   @map("resource_type")
  folder         String?
  bytes          Int?
  width          Int?
  height         Int?
  duration       Int?
  prompt         String?
  model          String?
  mode           String?
  visibility     String   @default("private")
  allowRemix     Boolean  @default(false) @map("allow_remix")
  env            String   @default("production")
  meta           Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  // Add missing fields that functions need
  cloudinaryPublicId String? @map("cloudinary_public_id")
  mediaType         String? @map("media_type")
  presetKey         String? @map("preset_key")
  sourceAssetId     String? @map("source_asset_id")
  status            String  @default("pending")
  
  owner          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([visibility, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([publicId])
  @@map("media_assets")
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  amount    Int
  env       String   @default("production")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, env, createdAt(sort: Desc)])
  @@map("credits_ledger")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@map("notifications")
}

model NeoGlitchMedia {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  imageUrl       String   @map("image_url")
  sourceUrl      String   @map("source_url")
  prompt         String
  preset         String
  runId          String   @unique @map("run_id")
  createdAt      DateTime @default(now()) @map("created_at")
  status         String   @default("completed")
  stabilityJobId String?  @map("stability_job_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)])
  @@index([status])
  @@index([preset])
  @@index([stabilityJobId])
  @@map("neo_glitch_media")
}

model AppConfig {
  key   String @id
  value Json?

  @@map("app_config")
}

model ReferralSignup {
  id               String    @id
  referrer_user_id String
  new_user_id      String    @unique
  referrer_email   String?
  new_user_email   String?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)

  @@index([new_user_id], map: "idx_referral_signups_new_user")
  @@index([referrer_user_id], map: "idx_referral_signups_referrer")
  @@map("referral_signups")
}

model UserCredits {
  user_id    String    @id
  balance    Int?      @default(0)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "idx_user_credits_user_id")
  @@map("user_credits")
}

model AuthOtp {
  id        String    @id @default(cuid())
  email     String
  code      String
  used      Boolean?  @default(false)
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([email, code], map: "idx_auth_otps_email_code")
  @@index([expiresAt], map: "idx_auth_otps_expires_at")
  @@map("auth_otps")
}
