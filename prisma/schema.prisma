// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

// Enable required extensions
model Extensions {
  @@map("_extensions")
}

// Users table - bulletproof ownership
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  externalId String   @unique @map("external_id") // Netlify Identity sub (string)
  name       String?
  tier       String   @default("registered")
  avatarUrl  String?  @map("avatar_url")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  media      Media[]
  settings   UserSettings?
  credits    CreditLedger[]

  @@map("users")
}

// User settings - separate table for flexibility
model UserSettings {
  id           String @id @default(cuid())
  userId       String @unique @map("user_id")
  shareToFeed  Boolean @default(true) @map("share_to_feed")
  allowRemix   Boolean @default(true) @map("allow_remix")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Media assets - clean ownership model
model Media {
  id           String   @id @default(cuid())
  ownerId      String   @map("owner_id") // Always required, no nullable owner_id bugs
  url          String   // Must be HTTPS
  publicId     String?  @unique @map("public_id") // Cloudinary public ID
  resourceType String   @map("resource_type") // image, video, raw
  folder       String?
  bytes        Int?
  width        Int?
  height       Int?
  duration     Int?
  prompt       String?
  negativePrompt String? @map("negative_prompt")
  model        String?
  mode         String?
  visibility   String   @default("private") // private, public
  allowRemix   Boolean  @default(false) @map("allow_remix")
  env          String   @default("production")
  meta         Json?    // Flexible metadata
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([ownerId, createdAt(sort: Desc)])
  @@index([visibility, createdAt(sort: Desc)])
  @@index([publicId])
  
  @@map("media_assets")
}

// Credits ledger for quota tracking
model CreditLedger {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  amount    Int      // Positive for credits added, negative for usage
  reason    String   // e.g., "generation", "bonus", "purchase"
  env       String   @default("production")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for quota calculations
  @@index([userId, env, createdAt(sort: Desc)])
  
  @@map("credits_ledger")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // e.g., "generation_complete", "tier_upgrade"
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, read, createdAt(sort: Desc)])
  
  @@map("notifications")
}
